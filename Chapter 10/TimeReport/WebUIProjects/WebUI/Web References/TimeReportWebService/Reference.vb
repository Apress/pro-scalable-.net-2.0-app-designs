'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
'
Namespace TimeReportWebService
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TimeReportWSSoap", [Namespace]:="http://msdotnet.nu/WebService/TimeReport/TimeReportService")>  _
    Public Class TimeReportWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/TimeReportWS/TimeReportWebServiceProjects_WebService/TimeReport."& _ 
"asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/SaveTimeReport", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTimeReport(ByVal ds As dsTimeReport) As Object
            Dim results() As Object = Me.Invoke("SaveTimeReport", New Object() {ds})
            Return CType(results(0),Object)
        End Function
        
        '<remarks/>
        Public Function BeginSaveTimeReport(ByVal ds As dsTimeReport, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaveTimeReport", New Object() {ds}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndSaveTimeReport(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/GetTimeReport", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTimeReport(ByVal UserID As String, ByVal WeekNo As Integer) As dsTimeReport
            Dim results() As Object = Me.Invoke("GetTimeReport", New Object() {UserID, WeekNo})
            Return CType(results(0),dsTimeReport)
        End Function
        
        '<remarks/>
        Public Function BeginGetTimeReport(ByVal UserID As String, ByVal WeekNo As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTimeReport", New Object() {UserID, WeekNo}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetTimeReport(ByVal asyncResult As System.IAsyncResult) As dsTimeReport
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsTimeReport)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/GetOngoingReports", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOngoingReports(ByVal UserID As String) As dsOngoingReports
            Dim results() As Object = Me.Invoke("GetOngoingReports", New Object() {UserID})
            Return CType(results(0),dsOngoingReports)
        End Function
        
        '<remarks/>
        Public Function BeginGetOngoingReports(ByVal UserID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOngoingReports", New Object() {UserID}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetOngoingReports(ByVal asyncResult As System.IAsyncResult) As dsOngoingReports
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsOngoingReports)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/GetAllProjects", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllProjects(ByVal UserID As String) As dsProjects
            Dim results() As Object = Me.Invoke("GetAllProjects", New Object() {UserID})
            Return CType(results(0),dsProjects)
        End Function
        
        '<remarks/>
        Public Function BeginGetAllProjects(ByVal UserID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAllProjects", New Object() {UserID}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetAllProjects(ByVal asyncResult As System.IAsyncResult) As dsProjects
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsProjects)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/GetAvailableWeekReport"& _ 
"s", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailableWeekReports(ByVal UserID As String) As dsWeekReports
            Dim results() As Object = Me.Invoke("GetAvailableWeekReports", New Object() {UserID})
            Return CType(results(0),dsWeekReports)
        End Function
        
        '<remarks/>
        Public Function BeginGetAvailableWeekReports(ByVal UserID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAvailableWeekReports", New Object() {UserID}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetAvailableWeekReports(ByVal asyncResult As System.IAsyncResult) As dsWeekReports
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsWeekReports)
        End Function
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsWeekReports
        Inherits DataSet
        
        Private tableAvailableWeekReports As AvailableWeekReportsDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("AvailableWeekReports")) Is Nothing) Then
                    Me.Tables.Add(New AvailableWeekReportsDataTable(ds.Tables("AvailableWeekReports")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property AvailableWeekReports As AvailableWeekReportsDataTable
            Get
                Return Me.tableAvailableWeekReports
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsWeekReports = CType(MyBase.Clone,dsWeekReports)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AvailableWeekReports")) Is Nothing) Then
                Me.Tables.Add(New AvailableWeekReportsDataTable(ds.Tables("AvailableWeekReports")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableAvailableWeekReports = CType(Me.Tables("AvailableWeekReports"),AvailableWeekReportsDataTable)
            If (Not (Me.tableAvailableWeekReports) Is Nothing) Then
                Me.tableAvailableWeekReports.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsWeekReports"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsWeekReports.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableAvailableWeekReports = New AvailableWeekReportsDataTable
            Me.Tables.Add(Me.tableAvailableWeekReports)
        End Sub
        
        Private Function ShouldSerializeAvailableWeekReports() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub AvailableWeekReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As AvailableWeekReportsRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AvailableWeekReportsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnWeekReportID As DataColumn
            
            Private columnStartDate As DataColumn
            
            Private columnEndDate As DataColumn
            
            Private columnWeekNumber As DataColumn
            
            Private columnExpectedHours As DataColumn
            
            Friend Sub New()
                MyBase.New("AvailableWeekReports")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property WeekReportIDColumn As DataColumn
                Get
                    Return Me.columnWeekReportID
                End Get
            End Property
            
            Friend ReadOnly Property StartDateColumn As DataColumn
                Get
                    Return Me.columnStartDate
                End Get
            End Property
            
            Friend ReadOnly Property EndDateColumn As DataColumn
                Get
                    Return Me.columnEndDate
                End Get
            End Property
            
            Friend ReadOnly Property WeekNumberColumn As DataColumn
                Get
                    Return Me.columnWeekNumber
                End Get
            End Property
            
            Friend ReadOnly Property ExpectedHoursColumn As DataColumn
                Get
                    Return Me.columnExpectedHours
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As AvailableWeekReportsRow
                Get
                    Return CType(Me.Rows(index),AvailableWeekReportsRow)
                End Get
            End Property
            
            Public Event AvailableWeekReportsRowChanged As AvailableWeekReportsRowChangeEventHandler
            
            Public Event AvailableWeekReportsRowChanging As AvailableWeekReportsRowChangeEventHandler
            
            Public Event AvailableWeekReportsRowDeleted As AvailableWeekReportsRowChangeEventHandler
            
            Public Event AvailableWeekReportsRowDeleting As AvailableWeekReportsRowChangeEventHandler
            
            Public Overloads Sub AddAvailableWeekReportsRow(ByVal row As AvailableWeekReportsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddAvailableWeekReportsRow(ByVal WeekReportID As Long, ByVal StartDate As Date, ByVal EndDate As Date, ByVal WeekNumber As String, ByVal ExpectedHours As Integer) As AvailableWeekReportsRow
                Dim rowAvailableWeekReportsRow As AvailableWeekReportsRow = CType(Me.NewRow,AvailableWeekReportsRow)
                rowAvailableWeekReportsRow.ItemArray = New Object() {WeekReportID, StartDate, EndDate, WeekNumber, ExpectedHours}
                Me.Rows.Add(rowAvailableWeekReportsRow)
                Return rowAvailableWeekReportsRow
            End Function
            
            Public Function FindByWeekReportID(ByVal WeekReportID As Long) As AvailableWeekReportsRow
                Return CType(Me.Rows.Find(New Object() {WeekReportID}),AvailableWeekReportsRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As AvailableWeekReportsDataTable = CType(MyBase.Clone,AvailableWeekReportsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New AvailableWeekReportsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnWeekReportID = Me.Columns("WeekReportID")
                Me.columnStartDate = Me.Columns("StartDate")
                Me.columnEndDate = Me.Columns("EndDate")
                Me.columnWeekNumber = Me.Columns("WeekNumber")
                Me.columnExpectedHours = Me.Columns("ExpectedHours")
            End Sub
            
            Private Sub InitClass()
                Me.columnWeekReportID = New DataColumn("WeekReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekReportID)
                Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnStartDate)
                Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEndDate)
                Me.columnWeekNumber = New DataColumn("WeekNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekNumber)
                Me.columnExpectedHours = New DataColumn("ExpectedHours", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnExpectedHours)
                Me.Constraints.Add(New UniqueConstraint("dsWeekReportsKey1", New DataColumn() {Me.columnWeekReportID}, true))
                Me.columnWeekReportID.AllowDBNull = false
                Me.columnWeekReportID.Unique = true
                Me.columnStartDate.AllowDBNull = false
                Me.columnEndDate.AllowDBNull = false
                Me.columnWeekNumber.AllowDBNull = false
                Me.columnExpectedHours.AllowDBNull = false
            End Sub
            
            Public Function NewAvailableWeekReportsRow() As AvailableWeekReportsRow
                Return CType(Me.NewRow,AvailableWeekReportsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New AvailableWeekReportsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(AvailableWeekReportsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.AvailableWeekReportsRowChangedEvent) Is Nothing) Then
                    RaiseEvent AvailableWeekReportsRowChanged(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.AvailableWeekReportsRowChangingEvent) Is Nothing) Then
                    RaiseEvent AvailableWeekReportsRowChanging(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.AvailableWeekReportsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent AvailableWeekReportsRowDeleted(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.AvailableWeekReportsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent AvailableWeekReportsRowDeleting(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveAvailableWeekReportsRow(ByVal row As AvailableWeekReportsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AvailableWeekReportsRow
            Inherits DataRow
            
            Private tableAvailableWeekReports As AvailableWeekReportsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableAvailableWeekReports = CType(Me.Table,AvailableWeekReportsDataTable)
            End Sub
            
            Public Property WeekReportID As Long
                Get
                    Return CType(Me(Me.tableAvailableWeekReports.WeekReportIDColumn),Long)
                End Get
                Set
                    Me(Me.tableAvailableWeekReports.WeekReportIDColumn) = value
                End Set
            End Property
            
            Public Property StartDate As Date
                Get
                    Return CType(Me(Me.tableAvailableWeekReports.StartDateColumn),Date)
                End Get
                Set
                    Me(Me.tableAvailableWeekReports.StartDateColumn) = value
                End Set
            End Property
            
            Public Property EndDate As Date
                Get
                    Return CType(Me(Me.tableAvailableWeekReports.EndDateColumn),Date)
                End Get
                Set
                    Me(Me.tableAvailableWeekReports.EndDateColumn) = value
                End Set
            End Property
            
            Public Property WeekNumber As String
                Get
                    Return CType(Me(Me.tableAvailableWeekReports.WeekNumberColumn),String)
                End Get
                Set
                    Me(Me.tableAvailableWeekReports.WeekNumberColumn) = value
                End Set
            End Property
            
            Public Property ExpectedHours As Integer
                Get
                    Return CType(Me(Me.tableAvailableWeekReports.ExpectedHoursColumn),Integer)
                End Get
                Set
                    Me(Me.tableAvailableWeekReports.ExpectedHoursColumn) = value
                End Set
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AvailableWeekReportsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As AvailableWeekReportsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As AvailableWeekReportsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As AvailableWeekReportsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsProjects
        Inherits DataSet
        
        Private tableProjects As ProjectsDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Projects")) Is Nothing) Then
                    Me.Tables.Add(New ProjectsDataTable(ds.Tables("Projects")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Projects As ProjectsDataTable
            Get
                Return Me.tableProjects
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsProjects = CType(MyBase.Clone,dsProjects)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Projects")) Is Nothing) Then
                Me.Tables.Add(New ProjectsDataTable(ds.Tables("Projects")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableProjects = CType(Me.Tables("Projects"),ProjectsDataTable)
            If (Not (Me.tableProjects) Is Nothing) Then
                Me.tableProjects.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsProjects"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsProjects.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableProjects = New ProjectsDataTable
            Me.Tables.Add(Me.tableProjects)
        End Sub
        
        Private Function ShouldSerializeProjects() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub ProjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectsRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProjectsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnUserProjectID As DataColumn
            
            Private columnProjectID As DataColumn
            
            Private columnRootProjectID As DataColumn
            
            Private columnUserID As DataColumn
            
            Private columnProjectName As DataColumn
            
            Private columnProjectDesription As DataColumn
            
            Friend Sub New()
                MyBase.New("Projects")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property UserProjectIDColumn As DataColumn
                Get
                    Return Me.columnUserProjectID
                End Get
            End Property
            
            Friend ReadOnly Property ProjectIDColumn As DataColumn
                Get
                    Return Me.columnProjectID
                End Get
            End Property
            
            Friend ReadOnly Property RootProjectIDColumn As DataColumn
                Get
                    Return Me.columnRootProjectID
                End Get
            End Property
            
            Friend ReadOnly Property UserIDColumn As DataColumn
                Get
                    Return Me.columnUserID
                End Get
            End Property
            
            Friend ReadOnly Property ProjectNameColumn As DataColumn
                Get
                    Return Me.columnProjectName
                End Get
            End Property
            
            Friend ReadOnly Property ProjectDesriptionColumn As DataColumn
                Get
                    Return Me.columnProjectDesription
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectsRow
                Get
                    Return CType(Me.Rows(index),ProjectsRow)
                End Get
            End Property
            
            Public Event ProjectsRowChanged As ProjectsRowChangeEventHandler
            
            Public Event ProjectsRowChanging As ProjectsRowChangeEventHandler
            
            Public Event ProjectsRowDeleted As ProjectsRowChangeEventHandler
            
            Public Event ProjectsRowDeleting As ProjectsRowChangeEventHandler
            
            Public Overloads Sub AddProjectsRow(ByVal row As ProjectsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddProjectsRow(ByVal UserProjectID As Long, ByVal ProjectID As Long, ByVal RootProjectID As Long, ByVal UserID As Long, ByVal ProjectName As String, ByVal ProjectDesription As String) As ProjectsRow
                Dim rowProjectsRow As ProjectsRow = CType(Me.NewRow,ProjectsRow)
                rowProjectsRow.ItemArray = New Object() {UserProjectID, ProjectID, RootProjectID, UserID, ProjectName, ProjectDesription}
                Me.Rows.Add(rowProjectsRow)
                Return rowProjectsRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As ProjectsDataTable = CType(MyBase.Clone,ProjectsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New ProjectsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnUserProjectID = Me.Columns("UserProjectID")
                Me.columnProjectID = Me.Columns("ProjectID")
                Me.columnRootProjectID = Me.Columns("RootProjectID")
                Me.columnUserID = Me.Columns("UserID")
                Me.columnProjectName = Me.Columns("ProjectName")
                Me.columnProjectDesription = Me.Columns("ProjectDesription")
            End Sub
            
            Private Sub InitClass()
                Me.columnUserProjectID = New DataColumn("UserProjectID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUserProjectID)
                Me.columnProjectID = New DataColumn("ProjectID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProjectID)
                Me.columnRootProjectID = New DataColumn("RootProjectID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnRootProjectID)
                Me.columnUserID = New DataColumn("UserID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUserID)
                Me.columnProjectName = New DataColumn("ProjectName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProjectName)
                Me.columnProjectDesription = New DataColumn("ProjectDesription", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProjectDesription)
                Me.columnUserProjectID.AllowDBNull = false
                Me.columnProjectID.AllowDBNull = false
                Me.columnRootProjectID.AllowDBNull = false
                Me.columnUserID.AllowDBNull = false
                Me.columnProjectName.AllowDBNull = false
            End Sub
            
            Public Function NewProjectsRow() As ProjectsRow
                Return CType(Me.NewRow,ProjectsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New ProjectsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(ProjectsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ProjectsRowChangedEvent) Is Nothing) Then
                    RaiseEvent ProjectsRowChanged(Me, New ProjectsRowChangeEvent(CType(e.Row,ProjectsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ProjectsRowChangingEvent) Is Nothing) Then
                    RaiseEvent ProjectsRowChanging(Me, New ProjectsRowChangeEvent(CType(e.Row,ProjectsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ProjectsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ProjectsRowDeleted(Me, New ProjectsRowChangeEvent(CType(e.Row,ProjectsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ProjectsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ProjectsRowDeleting(Me, New ProjectsRowChangeEvent(CType(e.Row,ProjectsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveProjectsRow(ByVal row As ProjectsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProjectsRow
            Inherits DataRow
            
            Private tableProjects As ProjectsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableProjects = CType(Me.Table,ProjectsDataTable)
            End Sub
            
            Public Property UserProjectID As Long
                Get
                    Return CType(Me(Me.tableProjects.UserProjectIDColumn),Long)
                End Get
                Set
                    Me(Me.tableProjects.UserProjectIDColumn) = value
                End Set
            End Property
            
            Public Property ProjectID As Long
                Get
                    Return CType(Me(Me.tableProjects.ProjectIDColumn),Long)
                End Get
                Set
                    Me(Me.tableProjects.ProjectIDColumn) = value
                End Set
            End Property
            
            Public Property RootProjectID As Long
                Get
                    Return CType(Me(Me.tableProjects.RootProjectIDColumn),Long)
                End Get
                Set
                    Me(Me.tableProjects.RootProjectIDColumn) = value
                End Set
            End Property
            
            Public Property UserID As Long
                Get
                    Return CType(Me(Me.tableProjects.UserIDColumn),Long)
                End Get
                Set
                    Me(Me.tableProjects.UserIDColumn) = value
                End Set
            End Property
            
            Public Property ProjectName As String
                Get
                    Return CType(Me(Me.tableProjects.ProjectNameColumn),String)
                End Get
                Set
                    Me(Me.tableProjects.ProjectNameColumn) = value
                End Set
            End Property
            
            Public Property ProjectDesription As String
                Get
                    Try 
                        Return CType(Me(Me.tableProjects.ProjectDesriptionColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableProjects.ProjectDesriptionColumn) = value
                End Set
            End Property
            
            Public Function IsProjectDesriptionNull() As Boolean
                Return Me.IsNull(Me.tableProjects.ProjectDesriptionColumn)
            End Function
            
            Public Sub SetProjectDesriptionNull()
                Me(Me.tableProjects.ProjectDesriptionColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProjectsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As ProjectsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As ProjectsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As ProjectsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsTimeReport
        Inherits DataSet
        
        Private tableUserReport As UserReportDataTable
        
        Private tableReportLine As ReportLineDataTable
        
        Private tableReportStatus As ReportStatusDataTable
        
        Private relationUserReportReportLine As DataRelation
        
        Private relationReportStatusUserReport As DataRelation
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("UserReport")) Is Nothing) Then
                    Me.Tables.Add(New UserReportDataTable(ds.Tables("UserReport")))
                End If
                If (Not (ds.Tables("ReportLine")) Is Nothing) Then
                    Me.Tables.Add(New ReportLineDataTable(ds.Tables("ReportLine")))
                End If
                If (Not (ds.Tables("ReportStatus")) Is Nothing) Then
                    Me.Tables.Add(New ReportStatusDataTable(ds.Tables("ReportStatus")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property UserReport As UserReportDataTable
            Get
                Return Me.tableUserReport
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ReportLine As ReportLineDataTable
            Get
                Return Me.tableReportLine
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ReportStatus As ReportStatusDataTable
            Get
                Return Me.tableReportStatus
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsTimeReport = CType(MyBase.Clone,dsTimeReport)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UserReport")) Is Nothing) Then
                Me.Tables.Add(New UserReportDataTable(ds.Tables("UserReport")))
            End If
            If (Not (ds.Tables("ReportLine")) Is Nothing) Then
                Me.Tables.Add(New ReportLineDataTable(ds.Tables("ReportLine")))
            End If
            If (Not (ds.Tables("ReportStatus")) Is Nothing) Then
                Me.Tables.Add(New ReportStatusDataTable(ds.Tables("ReportStatus")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableUserReport = CType(Me.Tables("UserReport"),UserReportDataTable)
            If (Not (Me.tableUserReport) Is Nothing) Then
                Me.tableUserReport.InitVars
            End If
            Me.tableReportLine = CType(Me.Tables("ReportLine"),ReportLineDataTable)
            If (Not (Me.tableReportLine) Is Nothing) Then
                Me.tableReportLine.InitVars
            End If
            Me.tableReportStatus = CType(Me.Tables("ReportStatus"),ReportStatusDataTable)
            If (Not (Me.tableReportStatus) Is Nothing) Then
                Me.tableReportStatus.InitVars
            End If
            Me.relationUserReportReportLine = Me.Relations("UserReportReportLine")
            Me.relationReportStatusUserReport = Me.Relations("ReportStatusUserReport")
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsTimeReport"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/TimeReport.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableUserReport = New UserReportDataTable
            Me.Tables.Add(Me.tableUserReport)
            Me.tableReportLine = New ReportLineDataTable
            Me.Tables.Add(Me.tableReportLine)
            Me.tableReportStatus = New ReportStatusDataTable
            Me.Tables.Add(Me.tableReportStatus)
            Dim fkc As ForeignKeyConstraint
            fkc = New ForeignKeyConstraint("ReportStatusUserReport", New DataColumn() {Me.tableReportStatus.ReportStatusIDColumn}, New DataColumn() {Me.tableUserReport.ReportStatusIDColumn})
            Me.tableUserReport.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("UserReportReportLine", New DataColumn() {Me.tableUserReport.UserReportsIDColumn}, New DataColumn() {Me.tableReportLine.ReportIDColumn})
            Me.tableReportLine.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            Me.relationUserReportReportLine = New DataRelation("UserReportReportLine", New DataColumn() {Me.tableUserReport.UserReportsIDColumn}, New DataColumn() {Me.tableReportLine.ReportIDColumn}, false)
            Me.Relations.Add(Me.relationUserReportReportLine)
            Me.relationReportStatusUserReport = New DataRelation("ReportStatusUserReport", New DataColumn() {Me.tableReportStatus.ReportStatusIDColumn}, New DataColumn() {Me.tableUserReport.ReportStatusIDColumn}, false)
            Me.Relations.Add(Me.relationReportStatusUserReport)
        End Sub
        
        Private Function ShouldSerializeUserReport() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeReportLine() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeReportStatus() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub UserReportRowChangeEventHandler(ByVal sender As Object, ByVal e As UserReportRowChangeEvent)
        
        Public Delegate Sub ReportLineRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportLineRowChangeEvent)
        
        Public Delegate Sub ReportStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportStatusRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class UserReportDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnUserReportsID As DataColumn
            
            Private columnUserID As DataColumn
            
            Private columnReportStatusID As DataColumn
            
            Private columnWeekReportID As DataColumn
            
            Friend Sub New()
                MyBase.New("UserReport")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property UserReportsIDColumn As DataColumn
                Get
                    Return Me.columnUserReportsID
                End Get
            End Property
            
            Friend ReadOnly Property UserIDColumn As DataColumn
                Get
                    Return Me.columnUserID
                End Get
            End Property
            
            Friend ReadOnly Property ReportStatusIDColumn As DataColumn
                Get
                    Return Me.columnReportStatusID
                End Get
            End Property
            
            Friend ReadOnly Property WeekReportIDColumn As DataColumn
                Get
                    Return Me.columnWeekReportID
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As UserReportRow
                Get
                    Return CType(Me.Rows(index),UserReportRow)
                End Get
            End Property
            
            Public Event UserReportRowChanged As UserReportRowChangeEventHandler
            
            Public Event UserReportRowChanging As UserReportRowChangeEventHandler
            
            Public Event UserReportRowDeleted As UserReportRowChangeEventHandler
            
            Public Event UserReportRowDeleting As UserReportRowChangeEventHandler
            
            Public Overloads Sub AddUserReportRow(ByVal row As UserReportRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddUserReportRow(ByVal UserReportsID As Long, ByVal UserID As Long, ByVal parentReportStatusRowByReportStatusUserReport As ReportStatusRow, ByVal WeekReportID As Long) As UserReportRow
                Dim rowUserReportRow As UserReportRow = CType(Me.NewRow,UserReportRow)
                rowUserReportRow.ItemArray = New Object() {UserReportsID, UserID, parentReportStatusRowByReportStatusUserReport(0), WeekReportID}
                Me.Rows.Add(rowUserReportRow)
                Return rowUserReportRow
            End Function
            
            Public Function FindByUserReportsID(ByVal UserReportsID As Long) As UserReportRow
                Return CType(Me.Rows.Find(New Object() {UserReportsID}),UserReportRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As UserReportDataTable = CType(MyBase.Clone,UserReportDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New UserReportDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnUserReportsID = Me.Columns("UserReportsID")
                Me.columnUserID = Me.Columns("UserID")
                Me.columnReportStatusID = Me.Columns("ReportStatusID")
                Me.columnWeekReportID = Me.Columns("WeekReportID")
            End Sub
            
            Private Sub InitClass()
                Me.columnUserReportsID = New DataColumn("UserReportsID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUserReportsID)
                Me.columnUserID = New DataColumn("UserID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUserID)
                Me.columnReportStatusID = New DataColumn("ReportStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportStatusID)
                Me.columnWeekReportID = New DataColumn("WeekReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekReportID)
                Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey1", New DataColumn() {Me.columnUserReportsID}, true))
                Me.columnUserReportsID.AllowDBNull = false
                Me.columnUserReportsID.Unique = true
                Me.columnUserID.AllowDBNull = false
                Me.columnWeekReportID.AllowDBNull = false
            End Sub
            
            Public Function NewUserReportRow() As UserReportRow
                Return CType(Me.NewRow,UserReportRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New UserReportRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(UserReportRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.UserReportRowChangedEvent) Is Nothing) Then
                    RaiseEvent UserReportRowChanged(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.UserReportRowChangingEvent) Is Nothing) Then
                    RaiseEvent UserReportRowChanging(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.UserReportRowDeletedEvent) Is Nothing) Then
                    RaiseEvent UserReportRowDeleted(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.UserReportRowDeletingEvent) Is Nothing) Then
                    RaiseEvent UserReportRowDeleting(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveUserReportRow(ByVal row As UserReportRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class UserReportRow
            Inherits DataRow
            
            Private tableUserReport As UserReportDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableUserReport = CType(Me.Table,UserReportDataTable)
            End Sub
            
            Public Property UserReportsID As Long
                Get
                    Return CType(Me(Me.tableUserReport.UserReportsIDColumn),Long)
                End Get
                Set
                    Me(Me.tableUserReport.UserReportsIDColumn) = value
                End Set
            End Property
            
            Public Property UserID As Long
                Get
                    Return CType(Me(Me.tableUserReport.UserIDColumn),Long)
                End Get
                Set
                    Me(Me.tableUserReport.UserIDColumn) = value
                End Set
            End Property
            
            Public Property ReportStatusID As Long
                Get
                    Try 
                        Return CType(Me(Me.tableUserReport.ReportStatusIDColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUserReport.ReportStatusIDColumn) = value
                End Set
            End Property
            
            Public Property WeekReportID As Long
                Get
                    Return CType(Me(Me.tableUserReport.WeekReportIDColumn),Long)
                End Get
                Set
                    Me(Me.tableUserReport.WeekReportIDColumn) = value
                End Set
            End Property
            
            Public Property ReportStatusRow As ReportStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("ReportStatusUserReport")),ReportStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("ReportStatusUserReport"))
                End Set
            End Property
            
            Public Function IsReportStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableUserReport.ReportStatusIDColumn)
            End Function
            
            Public Sub SetReportStatusIDNull()
                Me(Me.tableUserReport.ReportStatusIDColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetReportLineRows() As ReportLineRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("UserReportReportLine")),ReportLineRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class UserReportRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As UserReportRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As UserReportRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As UserReportRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportLineDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnReportLineID As DataColumn
            
            Private columnReportID As DataColumn
            
            Private columnProjectID As DataColumn
            
            Private columnTimeTypeID As DataColumn
            
            Private columnDescription As DataColumn
            
            Private columnReportLineStatusID As DataColumn
            
            Private columnReportedHours As DataColumn
            
            Private columnReportLineDate As DataColumn
            
            Friend Sub New()
                MyBase.New("ReportLine")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property ReportLineIDColumn As DataColumn
                Get
                    Return Me.columnReportLineID
                End Get
            End Property
            
            Friend ReadOnly Property ReportIDColumn As DataColumn
                Get
                    Return Me.columnReportID
                End Get
            End Property
            
            Friend ReadOnly Property ProjectIDColumn As DataColumn
                Get
                    Return Me.columnProjectID
                End Get
            End Property
            
            Friend ReadOnly Property TimeTypeIDColumn As DataColumn
                Get
                    Return Me.columnTimeTypeID
                End Get
            End Property
            
            Friend ReadOnly Property DescriptionColumn As DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            Friend ReadOnly Property ReportLineStatusIDColumn As DataColumn
                Get
                    Return Me.columnReportLineStatusID
                End Get
            End Property
            
            Friend ReadOnly Property ReportedHoursColumn As DataColumn
                Get
                    Return Me.columnReportedHours
                End Get
            End Property
            
            Friend ReadOnly Property ReportLineDateColumn As DataColumn
                Get
                    Return Me.columnReportLineDate
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As ReportLineRow
                Get
                    Return CType(Me.Rows(index),ReportLineRow)
                End Get
            End Property
            
            Public Event ReportLineRowChanged As ReportLineRowChangeEventHandler
            
            Public Event ReportLineRowChanging As ReportLineRowChangeEventHandler
            
            Public Event ReportLineRowDeleted As ReportLineRowChangeEventHandler
            
            Public Event ReportLineRowDeleting As ReportLineRowChangeEventHandler
            
            Public Overloads Sub AddReportLineRow(ByVal row As ReportLineRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddReportLineRow(ByVal ReportLineID As Long, ByVal parentUserReportRowByUserReportReportLine As UserReportRow, ByVal ProjectID As Long, ByVal TimeTypeID As Integer, ByVal Description As String, ByVal ReportLineStatusID As Long, ByVal ReportedHours As Integer, ByVal ReportLineDate As Date) As ReportLineRow
                Dim rowReportLineRow As ReportLineRow = CType(Me.NewRow,ReportLineRow)
                rowReportLineRow.ItemArray = New Object() {ReportLineID, parentUserReportRowByUserReportReportLine(0), ProjectID, TimeTypeID, Description, ReportLineStatusID, ReportedHours, ReportLineDate}
                Me.Rows.Add(rowReportLineRow)
                Return rowReportLineRow
            End Function
            
            Public Function FindByReportLineID(ByVal ReportLineID As Long) As ReportLineRow
                Return CType(Me.Rows.Find(New Object() {ReportLineID}),ReportLineRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As ReportLineDataTable = CType(MyBase.Clone,ReportLineDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New ReportLineDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnReportLineID = Me.Columns("ReportLineID")
                Me.columnReportID = Me.Columns("ReportID")
                Me.columnProjectID = Me.Columns("ProjectID")
                Me.columnTimeTypeID = Me.Columns("TimeTypeID")
                Me.columnDescription = Me.Columns("Description")
                Me.columnReportLineStatusID = Me.Columns("ReportLineStatusID")
                Me.columnReportedHours = Me.Columns("ReportedHours")
                Me.columnReportLineDate = Me.Columns("ReportLineDate")
            End Sub
            
            Private Sub InitClass()
                Me.columnReportLineID = New DataColumn("ReportLineID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportLineID)
                Me.columnReportID = New DataColumn("ReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportID)
                Me.columnProjectID = New DataColumn("ProjectID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProjectID)
                Me.columnTimeTypeID = New DataColumn("TimeTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnTimeTypeID)
                Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnDescription)
                Me.columnReportLineStatusID = New DataColumn("ReportLineStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportLineStatusID)
                Me.columnReportedHours = New DataColumn("ReportedHours", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportedHours)
                Me.columnReportLineDate = New DataColumn("ReportLineDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportLineDate)
                Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey2", New DataColumn() {Me.columnReportLineID}, true))
                Me.columnReportLineID.AllowDBNull = false
                Me.columnReportLineID.Unique = true
                Me.columnReportID.AllowDBNull = false
                Me.columnProjectID.AllowDBNull = false
                Me.columnTimeTypeID.AllowDBNull = false
                Me.columnReportedHours.AllowDBNull = false
                Me.columnReportLineDate.AllowDBNull = false
            End Sub
            
            Public Function NewReportLineRow() As ReportLineRow
                Return CType(Me.NewRow,ReportLineRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New ReportLineRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(ReportLineRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ReportLineRowChangedEvent) Is Nothing) Then
                    RaiseEvent ReportLineRowChanged(Me, New ReportLineRowChangeEvent(CType(e.Row,ReportLineRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ReportLineRowChangingEvent) Is Nothing) Then
                    RaiseEvent ReportLineRowChanging(Me, New ReportLineRowChangeEvent(CType(e.Row,ReportLineRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ReportLineRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ReportLineRowDeleted(Me, New ReportLineRowChangeEvent(CType(e.Row,ReportLineRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ReportLineRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ReportLineRowDeleting(Me, New ReportLineRowChangeEvent(CType(e.Row,ReportLineRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveReportLineRow(ByVal row As ReportLineRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportLineRow
            Inherits DataRow
            
            Private tableReportLine As ReportLineDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableReportLine = CType(Me.Table,ReportLineDataTable)
            End Sub
            
            Public Property ReportLineID As Long
                Get
                    Return CType(Me(Me.tableReportLine.ReportLineIDColumn),Long)
                End Get
                Set
                    Me(Me.tableReportLine.ReportLineIDColumn) = value
                End Set
            End Property
            
            Public Property ReportID As Long
                Get
                    Return CType(Me(Me.tableReportLine.ReportIDColumn),Long)
                End Get
                Set
                    Me(Me.tableReportLine.ReportIDColumn) = value
                End Set
            End Property
            
            Public Property ProjectID As Long
                Get
                    Return CType(Me(Me.tableReportLine.ProjectIDColumn),Long)
                End Get
                Set
                    Me(Me.tableReportLine.ProjectIDColumn) = value
                End Set
            End Property
            
            Public Property TimeTypeID As Integer
                Get
                    Return CType(Me(Me.tableReportLine.TimeTypeIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableReportLine.TimeTypeIDColumn) = value
                End Set
            End Property
            
            Public Property Description As String
                Get
                    Try 
                        Return CType(Me(Me.tableReportLine.DescriptionColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableReportLine.DescriptionColumn) = value
                End Set
            End Property
            
            Public Property ReportLineStatusID As Long
                Get
                    Try 
                        Return CType(Me(Me.tableReportLine.ReportLineStatusIDColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableReportLine.ReportLineStatusIDColumn) = value
                End Set
            End Property
            
            Public Property ReportedHours As Integer
                Get
                    Return CType(Me(Me.tableReportLine.ReportedHoursColumn),Integer)
                End Get
                Set
                    Me(Me.tableReportLine.ReportedHoursColumn) = value
                End Set
            End Property
            
            Public Property ReportLineDate As Date
                Get
                    Return CType(Me(Me.tableReportLine.ReportLineDateColumn),Date)
                End Get
                Set
                    Me(Me.tableReportLine.ReportLineDateColumn) = value
                End Set
            End Property
            
            Public Property UserReportRow As UserReportRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("UserReportReportLine")),UserReportRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("UserReportReportLine"))
                End Set
            End Property
            
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableReportLine.DescriptionColumn)
            End Function
            
            Public Sub SetDescriptionNull()
                Me(Me.tableReportLine.DescriptionColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsReportLineStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableReportLine.ReportLineStatusIDColumn)
            End Function
            
            Public Sub SetReportLineStatusIDNull()
                Me(Me.tableReportLine.ReportLineStatusIDColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportLineRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As ReportLineRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As ReportLineRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As ReportLineRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportStatusDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnReportStatusID As DataColumn
            
            Private columnReportStatusName As DataColumn
            
            Private columnDescription As DataColumn
            
            Friend Sub New()
                MyBase.New("ReportStatus")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property ReportStatusIDColumn As DataColumn
                Get
                    Return Me.columnReportStatusID
                End Get
            End Property
            
            Friend ReadOnly Property ReportStatusNameColumn As DataColumn
                Get
                    Return Me.columnReportStatusName
                End Get
            End Property
            
            Friend ReadOnly Property DescriptionColumn As DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As ReportStatusRow
                Get
                    Return CType(Me.Rows(index),ReportStatusRow)
                End Get
            End Property
            
            Public Event ReportStatusRowChanged As ReportStatusRowChangeEventHandler
            
            Public Event ReportStatusRowChanging As ReportStatusRowChangeEventHandler
            
            Public Event ReportStatusRowDeleted As ReportStatusRowChangeEventHandler
            
            Public Event ReportStatusRowDeleting As ReportStatusRowChangeEventHandler
            
            Public Overloads Sub AddReportStatusRow(ByVal row As ReportStatusRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddReportStatusRow(ByVal ReportStatusID As Long, ByVal ReportStatusName As String, ByVal Description As String) As ReportStatusRow
                Dim rowReportStatusRow As ReportStatusRow = CType(Me.NewRow,ReportStatusRow)
                rowReportStatusRow.ItemArray = New Object() {ReportStatusID, ReportStatusName, Description}
                Me.Rows.Add(rowReportStatusRow)
                Return rowReportStatusRow
            End Function
            
            Public Function FindByReportStatusID(ByVal ReportStatusID As Long) As ReportStatusRow
                Return CType(Me.Rows.Find(New Object() {ReportStatusID}),ReportStatusRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As ReportStatusDataTable = CType(MyBase.Clone,ReportStatusDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New ReportStatusDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnReportStatusID = Me.Columns("ReportStatusID")
                Me.columnReportStatusName = Me.Columns("ReportStatusName")
                Me.columnDescription = Me.Columns("Description")
            End Sub
            
            Private Sub InitClass()
                Me.columnReportStatusID = New DataColumn("ReportStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportStatusID)
                Me.columnReportStatusName = New DataColumn("ReportStatusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnReportStatusName)
                Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnDescription)
                Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey3", New DataColumn() {Me.columnReportStatusID}, true))
                Me.columnReportStatusID.AllowDBNull = false
                Me.columnReportStatusID.Unique = true
                Me.columnReportStatusName.AllowDBNull = false
            End Sub
            
            Public Function NewReportStatusRow() As ReportStatusRow
                Return CType(Me.NewRow,ReportStatusRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New ReportStatusRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(ReportStatusRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ReportStatusRowChangedEvent) Is Nothing) Then
                    RaiseEvent ReportStatusRowChanged(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ReportStatusRowChangingEvent) Is Nothing) Then
                    RaiseEvent ReportStatusRowChanging(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ReportStatusRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ReportStatusRowDeleted(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ReportStatusRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ReportStatusRowDeleting(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveReportStatusRow(ByVal row As ReportStatusRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportStatusRow
            Inherits DataRow
            
            Private tableReportStatus As ReportStatusDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableReportStatus = CType(Me.Table,ReportStatusDataTable)
            End Sub
            
            Public Property ReportStatusID As Long
                Get
                    Return CType(Me(Me.tableReportStatus.ReportStatusIDColumn),Long)
                End Get
                Set
                    Me(Me.tableReportStatus.ReportStatusIDColumn) = value
                End Set
            End Property
            
            Public Property ReportStatusName As String
                Get
                    Return CType(Me(Me.tableReportStatus.ReportStatusNameColumn),String)
                End Get
                Set
                    Me(Me.tableReportStatus.ReportStatusNameColumn) = value
                End Set
            End Property
            
            Public Property Description As String
                Get
                    Try 
                        Return CType(Me(Me.tableReportStatus.DescriptionColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableReportStatus.DescriptionColumn) = value
                End Set
            End Property
            
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableReportStatus.DescriptionColumn)
            End Function
            
            Public Sub SetDescriptionNull()
                Me(Me.tableReportStatus.DescriptionColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetUserReportRows() As UserReportRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("ReportStatusUserReport")),UserReportRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ReportStatusRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As ReportStatusRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As ReportStatusRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As ReportStatusRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsOngoingReports
        Inherits DataSet
        
        Private tableOngoingReports As OngoingReportsDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("OngoingReports")) Is Nothing) Then
                    Me.Tables.Add(New OngoingReportsDataTable(ds.Tables("OngoingReports")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property OngoingReports As OngoingReportsDataTable
            Get
                Return Me.tableOngoingReports
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsOngoingReports = CType(MyBase.Clone,dsOngoingReports)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OngoingReports")) Is Nothing) Then
                Me.Tables.Add(New OngoingReportsDataTable(ds.Tables("OngoingReports")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableOngoingReports = CType(Me.Tables("OngoingReports"),OngoingReportsDataTable)
            If (Not (Me.tableOngoingReports) Is Nothing) Then
                Me.tableOngoingReports.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsOngoingReports"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/dsOngoingReports.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableOngoingReports = New OngoingReportsDataTable
            Me.Tables.Add(Me.tableOngoingReports)
        End Sub
        
        Private Function ShouldSerializeOngoingReports() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub OngoingReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As OngoingReportsRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OngoingReportsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnWeekReportID As DataColumn
            
            Private columnStartDate As DataColumn
            
            Private columnEndDate As DataColumn
            
            Private columnWeekNumber As DataColumn
            
            Private columnExpectedHours As DataColumn
            
            Private columnUserReportsID As DataColumn
            
            Friend Sub New()
                MyBase.New("OngoingReports")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property WeekReportIDColumn As DataColumn
                Get
                    Return Me.columnWeekReportID
                End Get
            End Property
            
            Friend ReadOnly Property StartDateColumn As DataColumn
                Get
                    Return Me.columnStartDate
                End Get
            End Property
            
            Friend ReadOnly Property EndDateColumn As DataColumn
                Get
                    Return Me.columnEndDate
                End Get
            End Property
            
            Friend ReadOnly Property WeekNumberColumn As DataColumn
                Get
                    Return Me.columnWeekNumber
                End Get
            End Property
            
            Friend ReadOnly Property ExpectedHoursColumn As DataColumn
                Get
                    Return Me.columnExpectedHours
                End Get
            End Property
            
            Friend ReadOnly Property UserReportsIDColumn As DataColumn
                Get
                    Return Me.columnUserReportsID
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As OngoingReportsRow
                Get
                    Return CType(Me.Rows(index),OngoingReportsRow)
                End Get
            End Property
            
            Public Event OngoingReportsRowChanged As OngoingReportsRowChangeEventHandler
            
            Public Event OngoingReportsRowChanging As OngoingReportsRowChangeEventHandler
            
            Public Event OngoingReportsRowDeleted As OngoingReportsRowChangeEventHandler
            
            Public Event OngoingReportsRowDeleting As OngoingReportsRowChangeEventHandler
            
            Public Overloads Sub AddOngoingReportsRow(ByVal row As OngoingReportsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddOngoingReportsRow(ByVal WeekReportID As Long, ByVal StartDate As Date, ByVal EndDate As Date, ByVal WeekNumber As String, ByVal ExpectedHours As Integer, ByVal UserReportsID As Long) As OngoingReportsRow
                Dim rowOngoingReportsRow As OngoingReportsRow = CType(Me.NewRow,OngoingReportsRow)
                rowOngoingReportsRow.ItemArray = New Object() {WeekReportID, StartDate, EndDate, WeekNumber, ExpectedHours, UserReportsID}
                Me.Rows.Add(rowOngoingReportsRow)
                Return rowOngoingReportsRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As OngoingReportsDataTable = CType(MyBase.Clone,OngoingReportsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New OngoingReportsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnWeekReportID = Me.Columns("WeekReportID")
                Me.columnStartDate = Me.Columns("StartDate")
                Me.columnEndDate = Me.Columns("EndDate")
                Me.columnWeekNumber = Me.Columns("WeekNumber")
                Me.columnExpectedHours = Me.Columns("ExpectedHours")
                Me.columnUserReportsID = Me.Columns("UserReportsID")
            End Sub
            
            Private Sub InitClass()
                Me.columnWeekReportID = New DataColumn("WeekReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekReportID)
                Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnStartDate)
                Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEndDate)
                Me.columnWeekNumber = New DataColumn("WeekNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekNumber)
                Me.columnExpectedHours = New DataColumn("ExpectedHours", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnExpectedHours)
                Me.columnUserReportsID = New DataColumn("UserReportsID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUserReportsID)
                Me.columnWeekReportID.AllowDBNull = false
                Me.columnStartDate.AllowDBNull = false
                Me.columnEndDate.AllowDBNull = false
                Me.columnWeekNumber.AllowDBNull = false
                Me.columnExpectedHours.AllowDBNull = false
                Me.columnUserReportsID.AllowDBNull = false
            End Sub
            
            Public Function NewOngoingReportsRow() As OngoingReportsRow
                Return CType(Me.NewRow,OngoingReportsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New OngoingReportsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(OngoingReportsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OngoingReportsRowChangedEvent) Is Nothing) Then
                    RaiseEvent OngoingReportsRowChanged(Me, New OngoingReportsRowChangeEvent(CType(e.Row,OngoingReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OngoingReportsRowChangingEvent) Is Nothing) Then
                    RaiseEvent OngoingReportsRowChanging(Me, New OngoingReportsRowChangeEvent(CType(e.Row,OngoingReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OngoingReportsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OngoingReportsRowDeleted(Me, New OngoingReportsRowChangeEvent(CType(e.Row,OngoingReportsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OngoingReportsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OngoingReportsRowDeleting(Me, New OngoingReportsRowChangeEvent(CType(e.Row,OngoingReportsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveOngoingReportsRow(ByVal row As OngoingReportsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OngoingReportsRow
            Inherits DataRow
            
            Private tableOngoingReports As OngoingReportsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableOngoingReports = CType(Me.Table,OngoingReportsDataTable)
            End Sub
            
            Public Property WeekReportID As Long
                Get
                    Return CType(Me(Me.tableOngoingReports.WeekReportIDColumn),Long)
                End Get
                Set
                    Me(Me.tableOngoingReports.WeekReportIDColumn) = value
                End Set
            End Property
            
            Public Property StartDate As Date
                Get
                    Return CType(Me(Me.tableOngoingReports.StartDateColumn),Date)
                End Get
                Set
                    Me(Me.tableOngoingReports.StartDateColumn) = value
                End Set
            End Property
            
            Public Property EndDate As Date
                Get
                    Return CType(Me(Me.tableOngoingReports.EndDateColumn),Date)
                End Get
                Set
                    Me(Me.tableOngoingReports.EndDateColumn) = value
                End Set
            End Property
            
            Public Property WeekNumber As String
                Get
                    Return CType(Me(Me.tableOngoingReports.WeekNumberColumn),String)
                End Get
                Set
                    Me(Me.tableOngoingReports.WeekNumberColumn) = value
                End Set
            End Property
            
            Public Property ExpectedHours As Integer
                Get
                    Return CType(Me(Me.tableOngoingReports.ExpectedHoursColumn),Integer)
                End Get
                Set
                    Me(Me.tableOngoingReports.ExpectedHoursColumn) = value
                End Set
            End Property
            
            Public Property UserReportsID As Long
                Get
                    Return CType(Me(Me.tableOngoingReports.UserReportsIDColumn),Long)
                End Get
                Set
                    Me(Me.tableOngoingReports.UserReportsIDColumn) = value
                End Set
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OngoingReportsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As OngoingReportsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As OngoingReportsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As OngoingReportsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
