'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
'
Namespace localhost
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TimeReportWSSoap", [Namespace]:="http://msdotnet.nu/WebService/TimeReport/TimeReportService")>  _
    Public Class TimeReportWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Dim urlSetting As String = System.Configuration.ConfigurationSettings.AppSettings("WebUI.localhost.TimeReportWS")
            If (Not (urlSetting) Is Nothing) Then
                Me.Url = String.Concat(urlSetting, "")
            Else
                Me.Url = "http://localhost/TimeReportWS/TimeReportWebServiceProjects_WebService/TimeReportW"& _ 
"S.asmx"
            End If
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/SaveTimeReport", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTimeReport(ByVal ds As dsTimeReport) As Object
            Dim results() As Object = Me.Invoke("SaveTimeReport", New Object() {ds})
            Return CType(results(0),Object)
        End Function
        
        '<remarks/>
        Public Function BeginSaveTimeReport(ByVal ds As dsTimeReport, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaveTimeReport", New Object() {ds}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndSaveTimeReport(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://msdotnet.nu/WebService/TimeReport/TimeReportService/GetTimeReport", RequestNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", ResponseNamespace:="http://msdotnet.nu/WebService/TimeReport/TimeReportService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTimeReport(ByVal WeekNo As Integer) As dsTimeReport
            Dim results() As Object = Me.Invoke("GetTimeReport", New Object() {WeekNo})
            Return CType(results(0),dsTimeReport)
        End Function
        
        '<remarks/>
        Public Function BeginGetTimeReport(ByVal WeekNo As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTimeReport", New Object() {WeekNo}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetTimeReport(ByVal asyncResult As System.IAsyncResult) As dsTimeReport
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),dsTimeReport)
        End Function
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class dsTimeReport
        Inherits DataSet
        
        Private tableTimeReportHeader As TimeReportHeaderDataTable
        
        Private tableTimeReportLines As TimeReportLinesDataTable
        
        Private relationTimeReportTimeReportLine As DataRelation
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("TimeReportHeader")) Is Nothing) Then
                    Me.Tables.Add(New TimeReportHeaderDataTable(ds.Tables("TimeReportHeader")))
                End If
                If (Not (ds.Tables("TimeReportLines")) Is Nothing) Then
                    Me.Tables.Add(New TimeReportLinesDataTable(ds.Tables("TimeReportLines")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property TimeReportHeader As TimeReportHeaderDataTable
            Get
                Return Me.tableTimeReportHeader
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property TimeReportLines As TimeReportLinesDataTable
            Get
                Return Me.tableTimeReportLines
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As dsTimeReport = CType(MyBase.Clone,dsTimeReport)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TimeReportHeader")) Is Nothing) Then
                Me.Tables.Add(New TimeReportHeaderDataTable(ds.Tables("TimeReportHeader")))
            End If
            If (Not (ds.Tables("TimeReportLines")) Is Nothing) Then
                Me.Tables.Add(New TimeReportLinesDataTable(ds.Tables("TimeReportLines")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableTimeReportHeader = CType(Me.Tables("TimeReportHeader"),TimeReportHeaderDataTable)
            If (Not (Me.tableTimeReportHeader) Is Nothing) Then
                Me.tableTimeReportHeader.InitVars
            End If
            Me.tableTimeReportLines = CType(Me.Tables("TimeReportLines"),TimeReportLinesDataTable)
            If (Not (Me.tableTimeReportLines) Is Nothing) Then
                Me.tableTimeReportLines.InitVars
            End If
            Me.relationTimeReportTimeReportLine = Me.Relations("TimeReportTimeReportLine")
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "dsTimeReport"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/TimeReport.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableTimeReportHeader = New TimeReportHeaderDataTable
            Me.Tables.Add(Me.tableTimeReportHeader)
            Me.tableTimeReportLines = New TimeReportLinesDataTable
            Me.Tables.Add(Me.tableTimeReportLines)
            Dim fkc As ForeignKeyConstraint
            fkc = New ForeignKeyConstraint("TimeReportTimeReportLine", New DataColumn() {Me.tableTimeReportHeader.IdColumn}, New DataColumn() {Me.tableTimeReportLines.TimeReportIdColumn})
            Me.tableTimeReportLines.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            Me.relationTimeReportTimeReportLine = New DataRelation("TimeReportTimeReportLine", New DataColumn() {Me.tableTimeReportHeader.IdColumn}, New DataColumn() {Me.tableTimeReportLines.TimeReportIdColumn}, false)
            Me.Relations.Add(Me.relationTimeReportTimeReportLine)
        End Sub
        
        Private Function ShouldSerializeTimeReportHeader() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeTimeReportLines() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub TimeReportHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As TimeReportHeaderRowChangeEvent)
        
        Public Delegate Sub TimeReportLinesRowChangeEventHandler(ByVal sender As Object, ByVal e As TimeReportLinesRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportHeaderDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnId As DataColumn
            
            Private columnStartDate As DataColumn
            
            Private columnEndDate As DataColumn
            
            Private columnWeekNo As DataColumn
            
            Private columnExpectedHours As DataColumn
            
            Private columnComment As DataColumn
            
            Private columnOngoing As DataColumn
            
            Private columnSubmitted As DataColumn
            
            Private columnLocked As DataColumn
            
            Friend Sub New()
                MyBase.New("TimeReportHeader")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property IdColumn As DataColumn
                Get
                    Return Me.columnId
                End Get
            End Property
            
            Friend ReadOnly Property StartDateColumn As DataColumn
                Get
                    Return Me.columnStartDate
                End Get
            End Property
            
            Friend ReadOnly Property EndDateColumn As DataColumn
                Get
                    Return Me.columnEndDate
                End Get
            End Property
            
            Friend ReadOnly Property WeekNoColumn As DataColumn
                Get
                    Return Me.columnWeekNo
                End Get
            End Property
            
            Friend ReadOnly Property ExpectedHoursColumn As DataColumn
                Get
                    Return Me.columnExpectedHours
                End Get
            End Property
            
            Friend ReadOnly Property CommentColumn As DataColumn
                Get
                    Return Me.columnComment
                End Get
            End Property
            
            Friend ReadOnly Property OngoingColumn As DataColumn
                Get
                    Return Me.columnOngoing
                End Get
            End Property
            
            Friend ReadOnly Property SubmittedColumn As DataColumn
                Get
                    Return Me.columnSubmitted
                End Get
            End Property
            
            Friend ReadOnly Property LockedColumn As DataColumn
                Get
                    Return Me.columnLocked
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As TimeReportHeaderRow
                Get
                    Return CType(Me.Rows(index),TimeReportHeaderRow)
                End Get
            End Property
            
            Public Event TimeReportHeaderRowChanged As TimeReportHeaderRowChangeEventHandler
            
            Public Event TimeReportHeaderRowChanging As TimeReportHeaderRowChangeEventHandler
            
            Public Event TimeReportHeaderRowDeleted As TimeReportHeaderRowChangeEventHandler
            
            Public Event TimeReportHeaderRowDeleting As TimeReportHeaderRowChangeEventHandler
            
            Public Overloads Sub AddTimeReportHeaderRow(ByVal row As TimeReportHeaderRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddTimeReportHeaderRow(ByVal Id As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal WeekNo As Long, ByVal ExpectedHours As Long, ByVal Comment As String, ByVal Ongoing As String, ByVal Submitted As String, ByVal Locked As String) As TimeReportHeaderRow
                Dim rowTimeReportHeaderRow As TimeReportHeaderRow = CType(Me.NewRow,TimeReportHeaderRow)
                rowTimeReportHeaderRow.ItemArray = New Object() {Id, StartDate, EndDate, WeekNo, ExpectedHours, Comment, Ongoing, Submitted, Locked}
                Me.Rows.Add(rowTimeReportHeaderRow)
                Return rowTimeReportHeaderRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As TimeReportHeaderDataTable = CType(MyBase.Clone,TimeReportHeaderDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New TimeReportHeaderDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnId = Me.Columns("Id")
                Me.columnStartDate = Me.Columns("StartDate")
                Me.columnEndDate = Me.Columns("EndDate")
                Me.columnWeekNo = Me.Columns("WeekNo")
                Me.columnExpectedHours = Me.Columns("ExpectedHours")
                Me.columnComment = Me.Columns("Comment")
                Me.columnOngoing = Me.Columns("Ongoing")
                Me.columnSubmitted = Me.Columns("Submitted")
                Me.columnLocked = Me.Columns("Locked")
            End Sub
            
            Private Sub InitClass()
                Me.columnId = New DataColumn("Id", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnId)
                Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnStartDate)
                Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEndDate)
                Me.columnWeekNo = New DataColumn("WeekNo", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnWeekNo)
                Me.columnExpectedHours = New DataColumn("ExpectedHours", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnExpectedHours)
                Me.columnComment = New DataColumn("Comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnComment)
                Me.columnOngoing = New DataColumn("Ongoing", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOngoing)
                Me.columnSubmitted = New DataColumn("Submitted", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnSubmitted)
                Me.columnLocked = New DataColumn("Locked", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnLocked)
                Me.Constraints.Add(New UniqueConstraint("TimeReportKey1", New DataColumn() {Me.columnId}, false))
                Me.columnId.AllowDBNull = false
                Me.columnId.Unique = true
                Me.columnEndDate.AllowDBNull = false
            End Sub
            
            Public Function NewTimeReportHeaderRow() As TimeReportHeaderRow
                Return CType(Me.NewRow,TimeReportHeaderRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New TimeReportHeaderRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(TimeReportHeaderRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.TimeReportHeaderRowChangedEvent) Is Nothing) Then
                    RaiseEvent TimeReportHeaderRowChanged(Me, New TimeReportHeaderRowChangeEvent(CType(e.Row,TimeReportHeaderRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.TimeReportHeaderRowChangingEvent) Is Nothing) Then
                    RaiseEvent TimeReportHeaderRowChanging(Me, New TimeReportHeaderRowChangeEvent(CType(e.Row,TimeReportHeaderRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.TimeReportHeaderRowDeletedEvent) Is Nothing) Then
                    RaiseEvent TimeReportHeaderRowDeleted(Me, New TimeReportHeaderRowChangeEvent(CType(e.Row,TimeReportHeaderRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.TimeReportHeaderRowDeletingEvent) Is Nothing) Then
                    RaiseEvent TimeReportHeaderRowDeleting(Me, New TimeReportHeaderRowChangeEvent(CType(e.Row,TimeReportHeaderRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveTimeReportHeaderRow(ByVal row As TimeReportHeaderRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportHeaderRow
            Inherits DataRow
            
            Private tableTimeReportHeader As TimeReportHeaderDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableTimeReportHeader = CType(Me.Table,TimeReportHeaderDataTable)
            End Sub
            
            Public Property Id As String
                Get
                    Return CType(Me(Me.tableTimeReportHeader.IdColumn),String)
                End Get
                Set
                    Me(Me.tableTimeReportHeader.IdColumn) = value
                End Set
            End Property
            
            Public Property StartDate As Date
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.StartDateColumn),Date)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.StartDateColumn) = value
                End Set
            End Property
            
            Public Property EndDate As Date
                Get
                    Return CType(Me(Me.tableTimeReportHeader.EndDateColumn),Date)
                End Get
                Set
                    Me(Me.tableTimeReportHeader.EndDateColumn) = value
                End Set
            End Property
            
            Public Property WeekNo As Long
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.WeekNoColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.WeekNoColumn) = value
                End Set
            End Property
            
            Public Property ExpectedHours As Long
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.ExpectedHoursColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.ExpectedHoursColumn) = value
                End Set
            End Property
            
            Public Property Comment As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.CommentColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.CommentColumn) = value
                End Set
            End Property
            
            Public Property Ongoing As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.OngoingColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.OngoingColumn) = value
                End Set
            End Property
            
            Public Property Submitted As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.SubmittedColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.SubmittedColumn) = value
                End Set
            End Property
            
            Public Property Locked As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportHeader.LockedColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportHeader.LockedColumn) = value
                End Set
            End Property
            
            Public Function IsStartDateNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.StartDateColumn)
            End Function
            
            Public Sub SetStartDateNull()
                Me(Me.tableTimeReportHeader.StartDateColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsWeekNoNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.WeekNoColumn)
            End Function
            
            Public Sub SetWeekNoNull()
                Me(Me.tableTimeReportHeader.WeekNoColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsExpectedHoursNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.ExpectedHoursColumn)
            End Function
            
            Public Sub SetExpectedHoursNull()
                Me(Me.tableTimeReportHeader.ExpectedHoursColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsCommentNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.CommentColumn)
            End Function
            
            Public Sub SetCommentNull()
                Me(Me.tableTimeReportHeader.CommentColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsOngoingNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.OngoingColumn)
            End Function
            
            Public Sub SetOngoingNull()
                Me(Me.tableTimeReportHeader.OngoingColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsSubmittedNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.SubmittedColumn)
            End Function
            
            Public Sub SetSubmittedNull()
                Me(Me.tableTimeReportHeader.SubmittedColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsLockedNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportHeader.LockedColumn)
            End Function
            
            Public Sub SetLockedNull()
                Me(Me.tableTimeReportHeader.LockedColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetTimeReportLinesRows() As TimeReportLinesRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("TimeReportTimeReportLine")),TimeReportLinesRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportHeaderRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As TimeReportHeaderRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As TimeReportHeaderRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As TimeReportHeaderRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportLinesDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnTimeReportId As DataColumn
            
            Private columnId As DataColumn
            
            Private columnProjectNumber As DataColumn
            
            Private columnNumberOfHours As DataColumn
            
            Private columnTypeOfTime As DataColumn
            
            Private columnComment As DataColumn
            
            Friend Sub New()
                MyBase.New("TimeReportLines")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property TimeReportIdColumn As DataColumn
                Get
                    Return Me.columnTimeReportId
                End Get
            End Property
            
            Friend ReadOnly Property IdColumn As DataColumn
                Get
                    Return Me.columnId
                End Get
            End Property
            
            Friend ReadOnly Property ProjectNumberColumn As DataColumn
                Get
                    Return Me.columnProjectNumber
                End Get
            End Property
            
            Friend ReadOnly Property NumberOfHoursColumn As DataColumn
                Get
                    Return Me.columnNumberOfHours
                End Get
            End Property
            
            Friend ReadOnly Property TypeOfTimeColumn As DataColumn
                Get
                    Return Me.columnTypeOfTime
                End Get
            End Property
            
            Friend ReadOnly Property CommentColumn As DataColumn
                Get
                    Return Me.columnComment
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As TimeReportLinesRow
                Get
                    Return CType(Me.Rows(index),TimeReportLinesRow)
                End Get
            End Property
            
            Public Event TimeReportLinesRowChanged As TimeReportLinesRowChangeEventHandler
            
            Public Event TimeReportLinesRowChanging As TimeReportLinesRowChangeEventHandler
            
            Public Event TimeReportLinesRowDeleted As TimeReportLinesRowChangeEventHandler
            
            Public Event TimeReportLinesRowDeleting As TimeReportLinesRowChangeEventHandler
            
            Public Overloads Sub AddTimeReportLinesRow(ByVal row As TimeReportLinesRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddTimeReportLinesRow(ByVal parentTimeReportHeaderRowByTimeReportTimeReportLine As TimeReportHeaderRow, ByVal Id As String, ByVal ProjectNumber As String, ByVal NumberOfHours As Long, ByVal TypeOfTime As String, ByVal Comment As String) As TimeReportLinesRow
                Dim rowTimeReportLinesRow As TimeReportLinesRow = CType(Me.NewRow,TimeReportLinesRow)
                rowTimeReportLinesRow.ItemArray = New Object() {parentTimeReportHeaderRowByTimeReportTimeReportLine(0), Id, ProjectNumber, NumberOfHours, TypeOfTime, Comment}
                Me.Rows.Add(rowTimeReportLinesRow)
                Return rowTimeReportLinesRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As TimeReportLinesDataTable = CType(MyBase.Clone,TimeReportLinesDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New TimeReportLinesDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnTimeReportId = Me.Columns("TimeReportId")
                Me.columnId = Me.Columns("Id")
                Me.columnProjectNumber = Me.Columns("ProjectNumber")
                Me.columnNumberOfHours = Me.Columns("NumberOfHours")
                Me.columnTypeOfTime = Me.Columns("TypeOfTime")
                Me.columnComment = Me.Columns("Comment")
            End Sub
            
            Private Sub InitClass()
                Me.columnTimeReportId = New DataColumn("TimeReportId", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnTimeReportId)
                Me.columnId = New DataColumn("Id", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnId)
                Me.columnProjectNumber = New DataColumn("ProjectNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProjectNumber)
                Me.columnNumberOfHours = New DataColumn("NumberOfHours", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnNumberOfHours)
                Me.columnTypeOfTime = New DataColumn("TypeOfTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnTypeOfTime)
                Me.columnComment = New DataColumn("Comment", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnComment)
                Me.Constraints.Add(New UniqueConstraint("TimeReportKey2", New DataColumn() {Me.columnTimeReportId, Me.columnId}, false))
                Me.columnTimeReportId.AllowDBNull = false
                Me.columnId.AllowDBNull = false
            End Sub
            
            Public Function NewTimeReportLinesRow() As TimeReportLinesRow
                Return CType(Me.NewRow,TimeReportLinesRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New TimeReportLinesRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(TimeReportLinesRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.TimeReportLinesRowChangedEvent) Is Nothing) Then
                    RaiseEvent TimeReportLinesRowChanged(Me, New TimeReportLinesRowChangeEvent(CType(e.Row,TimeReportLinesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.TimeReportLinesRowChangingEvent) Is Nothing) Then
                    RaiseEvent TimeReportLinesRowChanging(Me, New TimeReportLinesRowChangeEvent(CType(e.Row,TimeReportLinesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.TimeReportLinesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent TimeReportLinesRowDeleted(Me, New TimeReportLinesRowChangeEvent(CType(e.Row,TimeReportLinesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.TimeReportLinesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent TimeReportLinesRowDeleting(Me, New TimeReportLinesRowChangeEvent(CType(e.Row,TimeReportLinesRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveTimeReportLinesRow(ByVal row As TimeReportLinesRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportLinesRow
            Inherits DataRow
            
            Private tableTimeReportLines As TimeReportLinesDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableTimeReportLines = CType(Me.Table,TimeReportLinesDataTable)
            End Sub
            
            Public Property TimeReportId As String
                Get
                    Return CType(Me(Me.tableTimeReportLines.TimeReportIdColumn),String)
                End Get
                Set
                    Me(Me.tableTimeReportLines.TimeReportIdColumn) = value
                End Set
            End Property
            
            Public Property Id As String
                Get
                    Return CType(Me(Me.tableTimeReportLines.IdColumn),String)
                End Get
                Set
                    Me(Me.tableTimeReportLines.IdColumn) = value
                End Set
            End Property
            
            Public Property ProjectNumber As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportLines.ProjectNumberColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportLines.ProjectNumberColumn) = value
                End Set
            End Property
            
            Public Property NumberOfHours As Long
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportLines.NumberOfHoursColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportLines.NumberOfHoursColumn) = value
                End Set
            End Property
            
            Public Property TypeOfTime As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportLines.TypeOfTimeColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportLines.TypeOfTimeColumn) = value
                End Set
            End Property
            
            Public Property Comment As String
                Get
                    Try 
                        Return CType(Me(Me.tableTimeReportLines.CommentColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTimeReportLines.CommentColumn) = value
                End Set
            End Property
            
            Public Property TimeReportHeaderRow As TimeReportHeaderRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("TimeReportTimeReportLine")),TimeReportHeaderRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("TimeReportTimeReportLine"))
                End Set
            End Property
            
            Public Function IsProjectNumberNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportLines.ProjectNumberColumn)
            End Function
            
            Public Sub SetProjectNumberNull()
                Me(Me.tableTimeReportLines.ProjectNumberColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsNumberOfHoursNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportLines.NumberOfHoursColumn)
            End Function
            
            Public Sub SetNumberOfHoursNull()
                Me(Me.tableTimeReportLines.NumberOfHoursColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsTypeOfTimeNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportLines.TypeOfTimeColumn)
            End Function
            
            Public Sub SetTypeOfTimeNull()
                Me(Me.tableTimeReportLines.TypeOfTimeColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsCommentNull() As Boolean
                Return Me.IsNull(Me.tableTimeReportLines.CommentColumn)
            End Function
            
            Public Sub SetCommentNull()
                Me(Me.tableTimeReportLines.CommentColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class TimeReportLinesRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As TimeReportLinesRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As TimeReportLinesRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As TimeReportLinesRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
