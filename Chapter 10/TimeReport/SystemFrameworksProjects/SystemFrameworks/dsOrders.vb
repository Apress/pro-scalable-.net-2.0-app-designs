'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsOrders
    Inherits DataSet
    
    Private tableOrderHeader As OrderHeaderDataTable
    
    Private tableOrderDetails As OrderDetailsDataTable
    
    Private relationOrderHeaderOrderDetails As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OrderHeader")) Is Nothing) Then
                Me.Tables.Add(New OrderHeaderDataTable(ds.Tables("OrderHeader")))
            End If
            If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
                Me.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderHeader As OrderHeaderDataTable
        Get
            Return Me.tableOrderHeader
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderDetails As OrderDetailsDataTable
        Get
            Return Me.tableOrderDetails
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsOrders = CType(MyBase.Clone,dsOrders)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("OrderHeader")) Is Nothing) Then
            Me.Tables.Add(New OrderHeaderDataTable(ds.Tables("OrderHeader")))
        End If
        If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
            Me.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOrderHeader = CType(Me.Tables("OrderHeader"),OrderHeaderDataTable)
        If (Not (Me.tableOrderHeader) Is Nothing) Then
            Me.tableOrderHeader.InitVars
        End If
        Me.tableOrderDetails = CType(Me.Tables("OrderDetails"),OrderDetailsDataTable)
        If (Not (Me.tableOrderDetails) Is Nothing) Then
            Me.tableOrderDetails.InitVars
        End If
        Me.relationOrderHeaderOrderDetails = Me.Relations("OrderHeaderOrderDetails")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsOrders"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsOrders.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOrderHeader = New OrderHeaderDataTable
        Me.Tables.Add(Me.tableOrderHeader)
        Me.tableOrderDetails = New OrderDetailsDataTable
        Me.Tables.Add(Me.tableOrderDetails)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("OrderHeaderOrderDetails", New DataColumn() {Me.tableOrderHeader.OrderIDColumn}, New DataColumn() {Me.tableOrderDetails.OrderIDColumn})
        Me.tableOrderDetails.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationOrderHeaderOrderDetails = New DataRelation("OrderHeaderOrderDetails", New DataColumn() {Me.tableOrderHeader.OrderIDColumn}, New DataColumn() {Me.tableOrderDetails.OrderIDColumn}, false)
        Me.Relations.Add(Me.relationOrderHeaderOrderDetails)
    End Sub
    
    Private Function ShouldSerializeOrderHeader() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOrderDetails() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OrderHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderHeaderRowChangeEvent)
    
    Public Delegate Sub OrderDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderDetailsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderHeaderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrderID As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnShippedDate As DataColumn
        
        Private columnShipVia As DataColumn
        
        Private columnFreight As DataColumn
        
        Private columnShipName As DataColumn
        
        Private columnShipCountry As DataColumn
        
        Friend Sub New()
            MyBase.New("OrderHeader")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OrderIDColumn As DataColumn
            Get
                Return Me.columnOrderID
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property ShippedDateColumn As DataColumn
            Get
                Return Me.columnShippedDate
            End Get
        End Property
        
        Friend ReadOnly Property ShipViaColumn As DataColumn
            Get
                Return Me.columnShipVia
            End Get
        End Property
        
        Friend ReadOnly Property FreightColumn As DataColumn
            Get
                Return Me.columnFreight
            End Get
        End Property
        
        Friend ReadOnly Property ShipNameColumn As DataColumn
            Get
                Return Me.columnShipName
            End Get
        End Property
        
        Friend ReadOnly Property ShipCountryColumn As DataColumn
            Get
                Return Me.columnShipCountry
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderHeaderRow
            Get
                Return CType(Me.Rows(index),OrderHeaderRow)
            End Get
        End Property
        
        Public Event OrderHeaderRowChanged As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowChanging As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowDeleted As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowDeleting As OrderHeaderRowChangeEventHandler
        
        Public Overloads Sub AddOrderHeaderRow(ByVal row As OrderHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrderHeaderRow(ByVal OrderDate As Date, ByVal ShippedDate As Date, ByVal ShipVia As Integer, ByVal Freight As Decimal, ByVal ShipName As String, ByVal ShipCountry As String) As OrderHeaderRow
            Dim rowOrderHeaderRow As OrderHeaderRow = CType(Me.NewRow,OrderHeaderRow)
            rowOrderHeaderRow.ItemArray = New Object() {Nothing, OrderDate, ShippedDate, ShipVia, Freight, ShipName, ShipCountry}
            Me.Rows.Add(rowOrderHeaderRow)
            Return rowOrderHeaderRow
        End Function
        
        Public Function FindByOrderID(ByVal OrderID As Integer) As OrderHeaderRow
            Return CType(Me.Rows.Find(New Object() {OrderID}),OrderHeaderRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrderHeaderDataTable = CType(MyBase.Clone,OrderHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrderHeaderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOrderID = Me.Columns("OrderID")
            Me.columnOrderDate = Me.Columns("OrderDate")
            Me.columnShippedDate = Me.Columns("ShippedDate")
            Me.columnShipVia = Me.Columns("ShipVia")
            Me.columnFreight = Me.Columns("Freight")
            Me.columnShipName = Me.Columns("ShipName")
            Me.columnShipCountry = Me.Columns("ShipCountry")
        End Sub
        
        Private Sub InitClass()
            Me.columnOrderID = New DataColumn("OrderID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderID)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnShippedDate = New DataColumn("ShippedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShippedDate)
            Me.columnShipVia = New DataColumn("ShipVia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipVia)
            Me.columnFreight = New DataColumn("Freight", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreight)
            Me.columnShipName = New DataColumn("ShipName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipName)
            Me.columnShipCountry = New DataColumn("ShipCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipCountry)
            Me.Constraints.Add(New UniqueConstraint("dsOrdersKey2", New DataColumn() {Me.columnOrderID}, true))
            Me.columnOrderID.AutoIncrement = true
            Me.columnOrderID.AllowDBNull = false
            Me.columnOrderID.ReadOnly = true
            Me.columnOrderID.Unique = true
        End Sub
        
        Public Function NewOrderHeaderRow() As OrderHeaderRow
            Return CType(Me.NewRow,OrderHeaderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrderHeaderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrderHeaderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowChanged(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowChanging(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowDeleted(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowDeleting(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrderHeaderRow(ByVal row As OrderHeaderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderHeaderRow
        Inherits DataRow
        
        Private tableOrderHeader As OrderHeaderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderHeader = CType(Me.Table,OrderHeaderDataTable)
        End Sub
        
        Public Property OrderID As Integer
            Get
                Return CType(Me(Me.tableOrderHeader.OrderIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderHeader.OrderIDColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.OrderDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property ShippedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShippedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShippedDateColumn) = value
            End Set
        End Property
        
        Public Property ShipVia As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipViaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipViaColumn) = value
            End Set
        End Property
        
        Public Property Freight As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.FreightColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.FreightColumn) = value
            End Set
        End Property
        
        Public Property ShipName As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipNameColumn) = value
            End Set
        End Property
        
        Public Property ShipCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipCountryColumn) = value
            End Set
        End Property
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableOrderHeader.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShippedDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShippedDateColumn)
        End Function
        
        Public Sub SetShippedDateNull()
            Me(Me.tableOrderHeader.ShippedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipViaNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipViaColumn)
        End Function
        
        Public Sub SetShipViaNull()
            Me(Me.tableOrderHeader.ShipViaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreightNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.FreightColumn)
        End Function
        
        Public Sub SetFreightNull()
            Me(Me.tableOrderHeader.FreightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipNameNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipNameColumn)
        End Function
        
        Public Sub SetShipNameNull()
            Me(Me.tableOrderHeader.ShipNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipCountryNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipCountryColumn)
        End Function
        
        Public Sub SetShipCountryNull()
            Me(Me.tableOrderHeader.ShipCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetOrderDetailsRows() As OrderDetailsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("OrderHeaderOrderDetails")),OrderDetailsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderHeaderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrderHeaderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrderHeaderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrderHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderDetailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrderID As DataColumn
        
        Private columnProductID As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnDiscount As DataColumn
        
        Friend Sub New()
            MyBase.New("OrderDetails")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OrderIDColumn As DataColumn
            Get
                Return Me.columnOrderID
            End Get
        End Property
        
        Friend ReadOnly Property ProductIDColumn As DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderDetailsRow
            Get
                Return CType(Me.Rows(index),OrderDetailsRow)
            End Get
        End Property
        
        Public Event OrderDetailsRowChanged As OrderDetailsRowChangeEventHandler
        
        Public Event OrderDetailsRowChanging As OrderDetailsRowChangeEventHandler
        
        Public Event OrderDetailsRowDeleted As OrderDetailsRowChangeEventHandler
        
        Public Event OrderDetailsRowDeleting As OrderDetailsRowChangeEventHandler
        
        Public Overloads Sub AddOrderDetailsRow(ByVal row As OrderDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrderDetailsRow(ByVal parentOrderHeaderRowByOrderHeaderOrderDetails As OrderHeaderRow, ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Discount As Single) As OrderDetailsRow
            Dim rowOrderDetailsRow As OrderDetailsRow = CType(Me.NewRow,OrderDetailsRow)
            rowOrderDetailsRow.ItemArray = New Object() {parentOrderHeaderRowByOrderHeaderOrderDetails(0), ProductID, UnitPrice, Quantity, Discount}
            Me.Rows.Add(rowOrderDetailsRow)
            Return rowOrderDetailsRow
        End Function
        
        Public Function FindByOrderIDProductID(ByVal OrderID As Integer, ByVal ProductID As Integer) As OrderDetailsRow
            Return CType(Me.Rows.Find(New Object() {OrderID, ProductID}),OrderDetailsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrderDetailsDataTable = CType(MyBase.Clone,OrderDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrderDetailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOrderID = Me.Columns("OrderID")
            Me.columnProductID = Me.Columns("ProductID")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnDiscount = Me.Columns("Discount")
        End Sub
        
        Private Sub InitClass()
            Me.columnOrderID = New DataColumn("OrderID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderID)
            Me.columnProductID = New DataColumn("ProductID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductID)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.Constraints.Add(New UniqueConstraint("dsOrdersKey1", New DataColumn() {Me.columnOrderID, Me.columnProductID}, true))
            Me.columnOrderID.AllowDBNull = false
            Me.columnProductID.AllowDBNull = false
            Me.columnUnitPrice.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnDiscount.AllowDBNull = false
        End Sub
        
        Public Function NewOrderDetailsRow() As OrderDetailsRow
            Return CType(Me.NewRow,OrderDetailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrderDetailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrderDetailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderDetailsRowChanged(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderDetailsRowChanging(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderDetailsRowDeleted(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderDetailsRowDeleting(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrderDetailsRow(ByVal row As OrderDetailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderDetailsRow
        Inherits DataRow
        
        Private tableOrderDetails As OrderDetailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderDetails = CType(Me.Table,OrderDetailsDataTable)
        End Sub
        
        Public Property OrderID As Integer
            Get
                Return CType(Me(Me.tableOrderDetails.OrderIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetails.OrderIDColumn) = value
            End Set
        End Property
        
        Public Property ProductID As Integer
            Get
                Return CType(Me(Me.tableOrderDetails.ProductIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetails.ProductIDColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Return CType(Me(Me.tableOrderDetails.UnitPriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableOrderDetails.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property Quantity As Short
            Get
                Return CType(Me(Me.tableOrderDetails.QuantityColumn),Short)
            End Get
            Set
                Me(Me.tableOrderDetails.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Discount As Single
            Get
                Return CType(Me(Me.tableOrderDetails.DiscountColumn),Single)
            End Get
            Set
                Me(Me.tableOrderDetails.DiscountColumn) = value
            End Set
        End Property
        
        Public Property OrderHeaderRow As OrderHeaderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("OrderHeaderOrderDetails")),OrderHeaderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("OrderHeaderOrderDetails"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderDetailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrderDetailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrderDetailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrderDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
