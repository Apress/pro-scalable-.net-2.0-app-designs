'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsWeekReports
    Inherits DataSet
    
    Private tableAvailableWeekReports As AvailableWeekReportsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AvailableWeekReports")) Is Nothing) Then
                Me.Tables.Add(New AvailableWeekReportsDataTable(ds.Tables("AvailableWeekReports")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AvailableWeekReports As AvailableWeekReportsDataTable
        Get
            Return Me.tableAvailableWeekReports
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsWeekReports = CType(MyBase.Clone,dsWeekReports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AvailableWeekReports")) Is Nothing) Then
            Me.Tables.Add(New AvailableWeekReportsDataTable(ds.Tables("AvailableWeekReports")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAvailableWeekReports = CType(Me.Tables("AvailableWeekReports"),AvailableWeekReportsDataTable)
        If (Not (Me.tableAvailableWeekReports) Is Nothing) Then
            Me.tableAvailableWeekReports.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsWeekReports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsWeekReports.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAvailableWeekReports = New AvailableWeekReportsDataTable
        Me.Tables.Add(Me.tableAvailableWeekReports)
    End Sub
    
    Private Function ShouldSerializeAvailableWeekReports() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AvailableWeekReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As AvailableWeekReportsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvailableWeekReportsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWeekReportID As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnWeekNumber As DataColumn
        
        Private columnExpectedHours As DataColumn
        
        Friend Sub New()
            MyBase.New("AvailableWeekReports")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property WeekReportIDColumn As DataColumn
            Get
                Return Me.columnWeekReportID
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property WeekNumberColumn As DataColumn
            Get
                Return Me.columnWeekNumber
            End Get
        End Property
        
        Friend ReadOnly Property ExpectedHoursColumn As DataColumn
            Get
                Return Me.columnExpectedHours
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AvailableWeekReportsRow
            Get
                Return CType(Me.Rows(index),AvailableWeekReportsRow)
            End Get
        End Property
        
        Public Event AvailableWeekReportsRowChanged As AvailableWeekReportsRowChangeEventHandler
        
        Public Event AvailableWeekReportsRowChanging As AvailableWeekReportsRowChangeEventHandler
        
        Public Event AvailableWeekReportsRowDeleted As AvailableWeekReportsRowChangeEventHandler
        
        Public Event AvailableWeekReportsRowDeleting As AvailableWeekReportsRowChangeEventHandler
        
        Public Overloads Sub AddAvailableWeekReportsRow(ByVal row As AvailableWeekReportsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAvailableWeekReportsRow(ByVal WeekReportID As Long, ByVal StartDate As Date, ByVal EndDate As Date, ByVal WeekNumber As String, ByVal ExpectedHours As Integer) As AvailableWeekReportsRow
            Dim rowAvailableWeekReportsRow As AvailableWeekReportsRow = CType(Me.NewRow,AvailableWeekReportsRow)
            rowAvailableWeekReportsRow.ItemArray = New Object() {WeekReportID, StartDate, EndDate, WeekNumber, ExpectedHours}
            Me.Rows.Add(rowAvailableWeekReportsRow)
            Return rowAvailableWeekReportsRow
        End Function
        
        Public Function FindByWeekReportID(ByVal WeekReportID As Long) As AvailableWeekReportsRow
            Return CType(Me.Rows.Find(New Object() {WeekReportID}),AvailableWeekReportsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AvailableWeekReportsDataTable = CType(MyBase.Clone,AvailableWeekReportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AvailableWeekReportsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnWeekReportID = Me.Columns("WeekReportID")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnWeekNumber = Me.Columns("WeekNumber")
            Me.columnExpectedHours = Me.Columns("ExpectedHours")
        End Sub
        
        Private Sub InitClass()
            Me.columnWeekReportID = New DataColumn("WeekReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekReportID)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnWeekNumber = New DataColumn("WeekNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekNumber)
            Me.columnExpectedHours = New DataColumn("ExpectedHours", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpectedHours)
            Me.Constraints.Add(New UniqueConstraint("dsWeekReportsKey1", New DataColumn() {Me.columnWeekReportID}, true))
            Me.columnWeekReportID.AllowDBNull = false
            Me.columnWeekReportID.Unique = true
            Me.columnStartDate.AllowDBNull = false
            Me.columnEndDate.AllowDBNull = false
            Me.columnWeekNumber.AllowDBNull = false
            Me.columnExpectedHours.AllowDBNull = false
        End Sub
        
        Public Function NewAvailableWeekReportsRow() As AvailableWeekReportsRow
            Return CType(Me.NewRow,AvailableWeekReportsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AvailableWeekReportsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AvailableWeekReportsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AvailableWeekReportsRowChangedEvent) Is Nothing) Then
                RaiseEvent AvailableWeekReportsRowChanged(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AvailableWeekReportsRowChangingEvent) Is Nothing) Then
                RaiseEvent AvailableWeekReportsRowChanging(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AvailableWeekReportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AvailableWeekReportsRowDeleted(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AvailableWeekReportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AvailableWeekReportsRowDeleting(Me, New AvailableWeekReportsRowChangeEvent(CType(e.Row,AvailableWeekReportsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAvailableWeekReportsRow(ByVal row As AvailableWeekReportsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvailableWeekReportsRow
        Inherits DataRow
        
        Private tableAvailableWeekReports As AvailableWeekReportsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAvailableWeekReports = CType(Me.Table,AvailableWeekReportsDataTable)
        End Sub
        
        Public Property WeekReportID As Long
            Get
                Return CType(Me(Me.tableAvailableWeekReports.WeekReportIDColumn),Long)
            End Get
            Set
                Me(Me.tableAvailableWeekReports.WeekReportIDColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Return CType(Me(Me.tableAvailableWeekReports.StartDateColumn),Date)
            End Get
            Set
                Me(Me.tableAvailableWeekReports.StartDateColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Return CType(Me(Me.tableAvailableWeekReports.EndDateColumn),Date)
            End Get
            Set
                Me(Me.tableAvailableWeekReports.EndDateColumn) = value
            End Set
        End Property
        
        Public Property WeekNumber As String
            Get
                Return CType(Me(Me.tableAvailableWeekReports.WeekNumberColumn),String)
            End Get
            Set
                Me(Me.tableAvailableWeekReports.WeekNumberColumn) = value
            End Set
        End Property
        
        Public Property ExpectedHours As Integer
            Get
                Return CType(Me(Me.tableAvailableWeekReports.ExpectedHoursColumn),Integer)
            End Get
            Set
                Me(Me.tableAvailableWeekReports.ExpectedHoursColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AvailableWeekReportsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AvailableWeekReportsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AvailableWeekReportsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AvailableWeekReportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
