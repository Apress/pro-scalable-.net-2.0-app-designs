'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsTimeReport
    Inherits DataSet
    
    Private tableUserReport As UserReportDataTable
    
    Private tableReportLines As ReportLinesDataTable
    
    Private tableReportStatus As ReportStatusDataTable
    
    Private relationReportStatusUserReport As DataRelation
    
    Private relationUserReportReportLine As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UserReport")) Is Nothing) Then
                Me.Tables.Add(New UserReportDataTable(ds.Tables("UserReport")))
            End If
            If (Not (ds.Tables("ReportLines")) Is Nothing) Then
                Me.Tables.Add(New ReportLinesDataTable(ds.Tables("ReportLines")))
            End If
            If (Not (ds.Tables("ReportStatus")) Is Nothing) Then
                Me.Tables.Add(New ReportStatusDataTable(ds.Tables("ReportStatus")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserReport As UserReportDataTable
        Get
            Return Me.tableUserReport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportLines As ReportLinesDataTable
        Get
            Return Me.tableReportLines
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportStatus As ReportStatusDataTable
        Get
            Return Me.tableReportStatus
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsTimeReport = CType(MyBase.Clone,dsTimeReport)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("UserReport")) Is Nothing) Then
            Me.Tables.Add(New UserReportDataTable(ds.Tables("UserReport")))
        End If
        If (Not (ds.Tables("ReportLines")) Is Nothing) Then
            Me.Tables.Add(New ReportLinesDataTable(ds.Tables("ReportLines")))
        End If
        If (Not (ds.Tables("ReportStatus")) Is Nothing) Then
            Me.Tables.Add(New ReportStatusDataTable(ds.Tables("ReportStatus")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUserReport = CType(Me.Tables("UserReport"),UserReportDataTable)
        If (Not (Me.tableUserReport) Is Nothing) Then
            Me.tableUserReport.InitVars
        End If
        Me.tableReportLines = CType(Me.Tables("ReportLines"),ReportLinesDataTable)
        If (Not (Me.tableReportLines) Is Nothing) Then
            Me.tableReportLines.InitVars
        End If
        Me.tableReportStatus = CType(Me.Tables("ReportStatus"),ReportStatusDataTable)
        If (Not (Me.tableReportStatus) Is Nothing) Then
            Me.tableReportStatus.InitVars
        End If
        Me.relationReportStatusUserReport = Me.Relations("ReportStatusUserReport")
        Me.relationUserReportReportLine = Me.Relations("UserReportReportLine")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsTimeReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TimeReport.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUserReport = New UserReportDataTable
        Me.Tables.Add(Me.tableUserReport)
        Me.tableReportLines = New ReportLinesDataTable
        Me.Tables.Add(Me.tableReportLines)
        Me.tableReportStatus = New ReportStatusDataTable
        Me.Tables.Add(Me.tableReportStatus)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ReportStatusUserReport", New DataColumn() {Me.tableReportStatus.ReportStatusIDColumn}, New DataColumn() {Me.tableUserReport.ReportStatusIDColumn})
        Me.tableUserReport.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UserReportReportLine", New DataColumn() {Me.tableUserReport.UserReportsIDColumn}, New DataColumn() {Me.tableReportLines.ReportIDColumn})
        Me.tableReportLines.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationReportStatusUserReport = New DataRelation("ReportStatusUserReport", New DataColumn() {Me.tableReportStatus.ReportStatusIDColumn}, New DataColumn() {Me.tableUserReport.ReportStatusIDColumn}, false)
        Me.Relations.Add(Me.relationReportStatusUserReport)
        Me.relationUserReportReportLine = New DataRelation("UserReportReportLine", New DataColumn() {Me.tableUserReport.UserReportsIDColumn}, New DataColumn() {Me.tableReportLines.ReportIDColumn}, false)
        Me.Relations.Add(Me.relationUserReportReportLine)
    End Sub
    
    Private Function ShouldSerializeUserReport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReportLines() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeReportStatus() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UserReportRowChangeEventHandler(ByVal sender As Object, ByVal e As UserReportRowChangeEvent)
    
    Public Delegate Sub ReportLinesRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportLinesRowChangeEvent)
    
    Public Delegate Sub ReportStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportStatusRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserReportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserReportsID As DataColumn
        
        Private columnUserID As DataColumn
        
        Private columnReportStatusID As DataColumn
        
        Private columnWeekReportID As DataColumn
        
        Friend Sub New()
            MyBase.New("UserReport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserReportsIDColumn As DataColumn
            Get
                Return Me.columnUserReportsID
            End Get
        End Property
        
        Friend ReadOnly Property UserIDColumn As DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        Friend ReadOnly Property ReportStatusIDColumn As DataColumn
            Get
                Return Me.columnReportStatusID
            End Get
        End Property
        
        Friend ReadOnly Property WeekReportIDColumn As DataColumn
            Get
                Return Me.columnWeekReportID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserReportRow
            Get
                Return CType(Me.Rows(index),UserReportRow)
            End Get
        End Property
        
        Public Event UserReportRowChanged As UserReportRowChangeEventHandler
        
        Public Event UserReportRowChanging As UserReportRowChangeEventHandler
        
        Public Event UserReportRowDeleted As UserReportRowChangeEventHandler
        
        Public Event UserReportRowDeleting As UserReportRowChangeEventHandler
        
        Public Overloads Sub AddUserReportRow(ByVal row As UserReportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserReportRow(ByVal UserReportsID As Long, ByVal UserID As Long, ByVal parentReportStatusRowByReportStatusUserReport As ReportStatusRow, ByVal WeekReportID As Long) As UserReportRow
            Dim rowUserReportRow As UserReportRow = CType(Me.NewRow,UserReportRow)
            rowUserReportRow.ItemArray = New Object() {UserReportsID, UserID, parentReportStatusRowByReportStatusUserReport(0), WeekReportID}
            Me.Rows.Add(rowUserReportRow)
            Return rowUserReportRow
        End Function
        
        Public Function FindByUserReportsID(ByVal UserReportsID As Long) As UserReportRow
            Return CType(Me.Rows.Find(New Object() {UserReportsID}),UserReportRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserReportDataTable = CType(MyBase.Clone,UserReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserReportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserReportsID = Me.Columns("UserReportsID")
            Me.columnUserID = Me.Columns("UserID")
            Me.columnReportStatusID = Me.Columns("ReportStatusID")
            Me.columnWeekReportID = Me.Columns("WeekReportID")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserReportsID = New DataColumn("UserReportsID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserReportsID)
            Me.columnUserID = New DataColumn("UserID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserID)
            Me.columnReportStatusID = New DataColumn("ReportStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportStatusID)
            Me.columnWeekReportID = New DataColumn("WeekReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekReportID)
            Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey1", New DataColumn() {Me.columnUserReportsID}, true))
            Me.columnUserReportsID.AllowDBNull = false
            Me.columnUserReportsID.Unique = true
            Me.columnUserID.AllowDBNull = false
            Me.columnWeekReportID.AllowDBNull = false
        End Sub
        
        Public Function NewUserReportRow() As UserReportRow
            Return CType(Me.NewRow,UserReportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserReportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserReportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserReportRowChangedEvent) Is Nothing) Then
                RaiseEvent UserReportRowChanged(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserReportRowChangingEvent) Is Nothing) Then
                RaiseEvent UserReportRowChanging(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserReportRowDeleted(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserReportRowDeleting(Me, New UserReportRowChangeEvent(CType(e.Row,UserReportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserReportRow(ByVal row As UserReportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserReportRow
        Inherits DataRow
        
        Private tableUserReport As UserReportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserReport = CType(Me.Table,UserReportDataTable)
        End Sub
        
        Public Property UserReportsID As Long
            Get
                Return CType(Me(Me.tableUserReport.UserReportsIDColumn),Long)
            End Get
            Set
                Me(Me.tableUserReport.UserReportsIDColumn) = value
            End Set
        End Property
        
        Public Property UserID As Long
            Get
                Return CType(Me(Me.tableUserReport.UserIDColumn),Long)
            End Get
            Set
                Me(Me.tableUserReport.UserIDColumn) = value
            End Set
        End Property
        
        Public Property ReportStatusID As Long
            Get
                Try 
                    Return CType(Me(Me.tableUserReport.ReportStatusIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserReport.ReportStatusIDColumn) = value
            End Set
        End Property
        
        Public Property WeekReportID As Long
            Get
                Return CType(Me(Me.tableUserReport.WeekReportIDColumn),Long)
            End Get
            Set
                Me(Me.tableUserReport.WeekReportIDColumn) = value
            End Set
        End Property
        
        Public Property ReportStatusRow As ReportStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ReportStatusUserReport")),ReportStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ReportStatusUserReport"))
            End Set
        End Property
        
        Public Function IsReportStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableUserReport.ReportStatusIDColumn)
        End Function
        
        Public Sub SetReportStatusIDNull()
            Me(Me.tableUserReport.ReportStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetReportLinesRows() As ReportLinesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UserReportReportLine")),ReportLinesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserReportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserReportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserReportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportLinesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReportLineID As DataColumn
        
        Private columnReportID As DataColumn
        
        Private columnProjectID As DataColumn
        
        Private columnTimeTypeID As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnReportLineStatusID As DataColumn
        
        Private columnReportedHours As DataColumn
        
        Private columnReportLineDate As DataColumn
        
        Friend Sub New()
            MyBase.New("ReportLines")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ReportLineIDColumn As DataColumn
            Get
                Return Me.columnReportLineID
            End Get
        End Property
        
        Friend ReadOnly Property ReportIDColumn As DataColumn
            Get
                Return Me.columnReportID
            End Get
        End Property
        
        Friend ReadOnly Property ProjectIDColumn As DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        Friend ReadOnly Property TimeTypeIDColumn As DataColumn
            Get
                Return Me.columnTimeTypeID
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property ReportLineStatusIDColumn As DataColumn
            Get
                Return Me.columnReportLineStatusID
            End Get
        End Property
        
        Friend ReadOnly Property ReportedHoursColumn As DataColumn
            Get
                Return Me.columnReportedHours
            End Get
        End Property
        
        Friend ReadOnly Property ReportLineDateColumn As DataColumn
            Get
                Return Me.columnReportLineDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportLinesRow
            Get
                Return CType(Me.Rows(index),ReportLinesRow)
            End Get
        End Property
        
        Public Event ReportLinesRowChanged As ReportLinesRowChangeEventHandler
        
        Public Event ReportLinesRowChanging As ReportLinesRowChangeEventHandler
        
        Public Event ReportLinesRowDeleted As ReportLinesRowChangeEventHandler
        
        Public Event ReportLinesRowDeleting As ReportLinesRowChangeEventHandler
        
        Public Overloads Sub AddReportLinesRow(ByVal row As ReportLinesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReportLinesRow(ByVal ReportLineID As Long, ByVal parentUserReportRowByUserReportReportLine As UserReportRow, ByVal ProjectID As Long, ByVal TimeTypeID As Integer, ByVal Description As String, ByVal ReportLineStatusID As Long, ByVal ReportedHours As Integer, ByVal ReportLineDate As Date) As ReportLinesRow
            Dim rowReportLinesRow As ReportLinesRow = CType(Me.NewRow,ReportLinesRow)
            rowReportLinesRow.ItemArray = New Object() {ReportLineID, parentUserReportRowByUserReportReportLine(0), ProjectID, TimeTypeID, Description, ReportLineStatusID, ReportedHours, ReportLineDate}
            Me.Rows.Add(rowReportLinesRow)
            Return rowReportLinesRow
        End Function
        
        Public Function FindByReportLineID(ByVal ReportLineID As Long) As ReportLinesRow
            Return CType(Me.Rows.Find(New Object() {ReportLineID}),ReportLinesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReportLinesDataTable = CType(MyBase.Clone,ReportLinesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReportLinesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReportLineID = Me.Columns("ReportLineID")
            Me.columnReportID = Me.Columns("ReportID")
            Me.columnProjectID = Me.Columns("ProjectID")
            Me.columnTimeTypeID = Me.Columns("TimeTypeID")
            Me.columnDescription = Me.Columns("Description")
            Me.columnReportLineStatusID = Me.Columns("ReportLineStatusID")
            Me.columnReportedHours = Me.Columns("ReportedHours")
            Me.columnReportLineDate = Me.Columns("ReportLineDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnReportLineID = New DataColumn("ReportLineID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportLineID)
            Me.columnReportID = New DataColumn("ReportID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportID)
            Me.columnProjectID = New DataColumn("ProjectID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProjectID)
            Me.columnTimeTypeID = New DataColumn("TimeTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeTypeID)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnReportLineStatusID = New DataColumn("ReportLineStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportLineStatusID)
            Me.columnReportedHours = New DataColumn("ReportedHours", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportedHours)
            Me.columnReportLineDate = New DataColumn("ReportLineDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportLineDate)
            Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey2", New DataColumn() {Me.columnReportLineID}, true))
            Me.columnReportLineID.AllowDBNull = false
            Me.columnReportLineID.Unique = true
            Me.columnReportID.AllowDBNull = false
            Me.columnProjectID.AllowDBNull = false
            Me.columnTimeTypeID.AllowDBNull = false
            Me.columnReportedHours.AllowDBNull = false
            Me.columnReportLineDate.AllowDBNull = false
        End Sub
        
        Public Function NewReportLinesRow() As ReportLinesRow
            Return CType(Me.NewRow,ReportLinesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReportLinesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReportLinesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportLinesRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportLinesRowChanged(Me, New ReportLinesRowChangeEvent(CType(e.Row,ReportLinesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportLinesRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportLinesRowChanging(Me, New ReportLinesRowChangeEvent(CType(e.Row,ReportLinesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportLinesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportLinesRowDeleted(Me, New ReportLinesRowChangeEvent(CType(e.Row,ReportLinesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportLinesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportLinesRowDeleting(Me, New ReportLinesRowChangeEvent(CType(e.Row,ReportLinesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReportLinesRow(ByVal row As ReportLinesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportLinesRow
        Inherits DataRow
        
        Private tableReportLines As ReportLinesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportLines = CType(Me.Table,ReportLinesDataTable)
        End Sub
        
        Public Property ReportLineID As Long
            Get
                Return CType(Me(Me.tableReportLines.ReportLineIDColumn),Long)
            End Get
            Set
                Me(Me.tableReportLines.ReportLineIDColumn) = value
            End Set
        End Property
        
        Public Property ReportID As Long
            Get
                Return CType(Me(Me.tableReportLines.ReportIDColumn),Long)
            End Get
            Set
                Me(Me.tableReportLines.ReportIDColumn) = value
            End Set
        End Property
        
        Public Property ProjectID As Long
            Get
                Return CType(Me(Me.tableReportLines.ProjectIDColumn),Long)
            End Get
            Set
                Me(Me.tableReportLines.ProjectIDColumn) = value
            End Set
        End Property
        
        Public Property TimeTypeID As Integer
            Get
                Return CType(Me(Me.tableReportLines.TimeTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableReportLines.TimeTypeIDColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableReportLines.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportLines.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ReportLineStatusID As Long
            Get
                Try 
                    Return CType(Me(Me.tableReportLines.ReportLineStatusIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportLines.ReportLineStatusIDColumn) = value
            End Set
        End Property
        
        Public Property ReportedHours As Integer
            Get
                Return CType(Me(Me.tableReportLines.ReportedHoursColumn),Integer)
            End Get
            Set
                Me(Me.tableReportLines.ReportedHoursColumn) = value
            End Set
        End Property
        
        Public Property ReportLineDate As Date
            Get
                Return CType(Me(Me.tableReportLines.ReportLineDateColumn),Date)
            End Get
            Set
                Me(Me.tableReportLines.ReportLineDateColumn) = value
            End Set
        End Property
        
        Public Property UserReportRow As UserReportRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UserReportReportLine")),UserReportRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UserReportReportLine"))
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableReportLines.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableReportLines.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportLineStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableReportLines.ReportLineStatusIDColumn)
        End Function
        
        Public Sub SetReportLineStatusIDNull()
            Me(Me.tableReportLines.ReportLineStatusIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportLinesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReportLinesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReportLinesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReportLinesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportStatusDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReportStatusID As DataColumn
        
        Private columnReportStatusName As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("ReportStatus")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ReportStatusIDColumn As DataColumn
            Get
                Return Me.columnReportStatusID
            End Get
        End Property
        
        Friend ReadOnly Property ReportStatusNameColumn As DataColumn
            Get
                Return Me.columnReportStatusName
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportStatusRow
            Get
                Return CType(Me.Rows(index),ReportStatusRow)
            End Get
        End Property
        
        Public Event ReportStatusRowChanged As ReportStatusRowChangeEventHandler
        
        Public Event ReportStatusRowChanging As ReportStatusRowChangeEventHandler
        
        Public Event ReportStatusRowDeleted As ReportStatusRowChangeEventHandler
        
        Public Event ReportStatusRowDeleting As ReportStatusRowChangeEventHandler
        
        Public Overloads Sub AddReportStatusRow(ByVal row As ReportStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddReportStatusRow(ByVal ReportStatusID As Long, ByVal ReportStatusName As String, ByVal Description As String) As ReportStatusRow
            Dim rowReportStatusRow As ReportStatusRow = CType(Me.NewRow,ReportStatusRow)
            rowReportStatusRow.ItemArray = New Object() {ReportStatusID, ReportStatusName, Description}
            Me.Rows.Add(rowReportStatusRow)
            Return rowReportStatusRow
        End Function
        
        Public Function FindByReportStatusID(ByVal ReportStatusID As Long) As ReportStatusRow
            Return CType(Me.Rows.Find(New Object() {ReportStatusID}),ReportStatusRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ReportStatusDataTable = CType(MyBase.Clone,ReportStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ReportStatusDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReportStatusID = Me.Columns("ReportStatusID")
            Me.columnReportStatusName = Me.Columns("ReportStatusName")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnReportStatusID = New DataColumn("ReportStatusID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportStatusID)
            Me.columnReportStatusName = New DataColumn("ReportStatusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportStatusName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New UniqueConstraint("dsTimeReportKey3", New DataColumn() {Me.columnReportStatusID}, true))
            Me.columnReportStatusID.AllowDBNull = false
            Me.columnReportStatusID.Unique = true
            Me.columnReportStatusName.AllowDBNull = false
        End Sub
        
        Public Function NewReportStatusRow() As ReportStatusRow
            Return CType(Me.NewRow,ReportStatusRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ReportStatusRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReportStatusRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportStatusRowChanged(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportStatusRowChanging(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportStatusRowDeleted(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportStatusRowDeleting(Me, New ReportStatusRowChangeEvent(CType(e.Row,ReportStatusRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveReportStatusRow(ByVal row As ReportStatusRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportStatusRow
        Inherits DataRow
        
        Private tableReportStatus As ReportStatusDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableReportStatus = CType(Me.Table,ReportStatusDataTable)
        End Sub
        
        Public Property ReportStatusID As Long
            Get
                Return CType(Me(Me.tableReportStatus.ReportStatusIDColumn),Long)
            End Get
            Set
                Me(Me.tableReportStatus.ReportStatusIDColumn) = value
            End Set
        End Property
        
        Public Property ReportStatusName As String
            Get
                Return CType(Me(Me.tableReportStatus.ReportStatusNameColumn),String)
            End Get
            Set
                Me(Me.tableReportStatus.ReportStatusNameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableReportStatus.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReportStatus.DescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableReportStatus.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableReportStatus.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetUserReportRows() As UserReportRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ReportStatusUserReport")),UserReportRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ReportStatusRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ReportStatusRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ReportStatusRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ReportStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
